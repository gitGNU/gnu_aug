/* -*- c++ -*- */
/* Automatically generated by aubidl */
/* at Thu Dec 27 18:21:29 GMT Standard Time 2007 */

#ifndef AUG_VARRAYOB_H
#define AUG_VARRAYOB_H

#include "aub.h"

#if defined(__cplusplus)

#include "aubpp.hpp"

# if !defined(AUB_NOTHROW)
#  define AUB_NOTHROW
# endif /* !AUB_NOTHROW */

namespace aub {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */
struct aug_var;

/**
 * @defgroup aug_varrayob aug_varrayob
 *
 * @ingroup Object
 *
 * @{
 */

AUB_INTERFACE(aug_varrayob);

struct aug_varrayobvtbl {
    AUB_VTBL(aug_varrayob);
    struct aug_var* (*get_)(aug_varrayob*, struct aug_var*, unsigned);
    int (*size_)(aug_varrayob*);
};

#define aug_getvarrayob(this_, var, i) \
    ((aug_varrayob*)this_)->vtbl_->get_(this_, var, i)

#define aug_varrayobsize(this_) \
    ((aug_varrayob*)this_)->vtbl_->size_(this_)

/** @} */

#if defined(__cplusplus)
namespace aub {
    template <>
    struct object_traits<aug_varrayob> {
        typedef aug_varrayobvtbl vtbl;
        static const char*
        id() AUB_NOTHROW
        {
            return aug_varrayobid;
        }
    };
}

namespace aug {

    typedef aub::obref<aug_varrayob> varrayobref;

    inline struct aug_var*
    getvarrayob(aub::obref<aug_varrayob> this_, struct aug_var* var, unsigned i) AUB_NOTHROW
    {
        return this_.get()->vtbl_->get_(this_.get(), var, i);
    }

    inline int
    varrayobsize(aub::obref<aug_varrayob> this_) AUB_NOTHROW
    {
        return this_.get()->vtbl_->size_(this_.get());
    }

    template <typename T>
    class varrayob {

        aug_varrayob varrayob_;

        varrayob(const varrayob&);

        varrayob&
        operator =(const varrayob&);

        static void*
        cast_(aug_varrayob* this_, const char* id) AUB_NOTHROW
        {
            return aub::incget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static int
        retain_(aug_varrayob* this_) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->retain_();
        }
        static int
        release_(aug_varrayob* this_) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->release_();
        }
        static struct aug_var*
        get_(aug_varrayob* this_, struct aug_var* var, unsigned i) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getvarrayob_(var, i);
        }
        static int
        size_(aug_varrayob* this_) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->varrayobsize_();
        }
        static const aug_varrayobvtbl*
        vtbl()
        {
            static const aug_varrayobvtbl local = {
                cast_,
                retain_,
                release_,
                get_,
                size_
            };
            return &local;
        }
    public:
        explicit
        varrayob(T* impl = 0)
        {
            this->varrayob_.vtbl_ = this->vtbl();
            this->varrayob_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->varrayob_.impl_ = impl;
        }
        aug_varrayob*
        get() AUB_NOTHROW
        {
            return &this->varrayob_;
        }
        operator aub::obref<aug_varrayob>() AUB_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_varrayob {
        varrayob<basic_varrayob<T> > varrayob_;
        T impl_;
        int refs_;
        explicit
        basic_varrayob(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->varrayob_.reset(this);
        }
    public:
        aub::smartob<aub_object>
        cast_(const char* id) AUB_NOTHROW
        {
            if (aub::equalid<aub_object>(id) || aub::equalid<aug_varrayob>(id))
                return aub::object_retain<aub_object>(this->varrayob_);
            return null;
        }
        int
        retain_() AUB_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
            return 0;
        }
        int
        release_() AUB_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
            return 0;
        }
        struct aug_var*
        getvarrayob_(struct aug_var* var, unsigned i) AUB_NOTHROW
        {
            return this->impl_.getvarrayob_(var, i);
        }
        int
        varrayobsize_() AUB_NOTHROW
        {
            return this->impl_.varrayobsize_();
        }
        static aub::smartob<aug_varrayob>
        create(const T& impl = T())
        {
            basic_varrayob* ptr(new basic_varrayob(impl));
            return aub::object_attach<aug_varrayob>(ptr->varrayob_);
        }
    };

    template <typename T>
    class scoped_varrayob {
        varrayob<scoped_varrayob<T> > varrayob_;
        T impl_;
    public:
        explicit
        scoped_varrayob(const T& impl = T())
            : impl_(impl)
        {
            this->varrayob_.reset(this);
        }
        aub::smartob<aub_object>
        cast_(const char* id) AUB_NOTHROW
        {
            if (aub::equalid<aub_object>(id) || aub::equalid<aug_varrayob>(id))
                return aub::object_retain<aub_object>(this->varrayob_);
            return null;
        }
        int
        retain_() AUB_NOTHROW
        {
            return 0;
        }
        int
        release_() AUB_NOTHROW
        {
            return 0;
        }
        struct aug_var*
        getvarrayob_(struct aug_var* var, unsigned i) AUB_NOTHROW
        {
            return this->impl_.getvarrayob_(var, i);
        }
        int
        varrayobsize_() AUB_NOTHROW
        {
            return this->impl_.varrayobsize_();
        }
        aub_object*
        base() AUB_NOTHROW
        {
            return aub::obref<aub_object>(this->varrayob_).get();
        }
        aug_varrayob*
        get() AUB_NOTHROW
        {
            return this->varrayob_.get();
        }
        operator aub::obref<aug_varrayob>() AUB_NOTHROW
        {
            return this->varrayob_;
        }
    };
}
#endif /* __cplusplus */

#endif /* AUG_VARRAYOB_H */
