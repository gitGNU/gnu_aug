/* -*- c++ -*- */
/* Automatically generated by aubidl */
/* at Fri Jan 25 21:30:53 GMT Standard Time 2008 */

#ifndef AUG_ERRINFOB_H
#define AUG_ERRINFOB_H

#include "aub.h"

#if defined(__cplusplus)

#include "aubpp.hpp"

# if !defined(AUB_NOTHROW)
#  define AUB_NOTHROW
# endif /* !AUB_NOTHROW */

namespace aub {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/**
 * @defgroup aug_errinfob aug_errinfob
 *
 * @ingroup Object
 *
 * @{
 */

AUB_INTERFACE(aug_errinfob);

/**
 * Detailed error information.
 */

struct aug_errinfobvtbl {
    AUB_VTBL(aug_errinfob);
    int (*num_)(aug_errinfob*);
    char* (*desc_)(aug_errinfob*, char*, size_t);
};

/**
 * Last error number.
 * @param this_ The object.
 * @return Error number.
 */

#define aug_errinfobnum(this_) \
    ((aug_errinfob*)this_)->vtbl_->num_(this_)

/**
 * Last error description.
 * @param this_ The object.
 * @param dst Output buffer.
 * @param size Size of @a dst.
 * @return @a dst output buffer.
 */

#define aug_errinfobdesc(this_, dst, size) \
    ((aug_errinfob*)this_)->vtbl_->desc_(this_, dst, size)

/** @} */

#if defined(__cplusplus)
namespace aub {
    template <>
    struct object_traits<aug_errinfob> {
        typedef aug_errinfobvtbl vtbl;
        static const char*
        id() AUB_NOTHROW
        {
            return aug_errinfobid;
        }
    };
}

namespace aug {

    typedef aub::obref<aug_errinfob> errinfobref;

    inline int
    errinfobnum(aub::obref<aug_errinfob> this_) AUB_NOTHROW
    {
        return this_.get()->vtbl_->num_(this_.get());
    }

    inline char*
    errinfobdesc(aub::obref<aug_errinfob> this_, char* dst, size_t size) AUB_NOTHROW
    {
        return this_.get()->vtbl_->desc_(this_.get(), dst, size);
    }

    template <typename T>
    class errinfob {

        aug_errinfob errinfob_;

        errinfob(const errinfob&);

        errinfob&
        operator =(const errinfob&);

        static void*
        cast_(aug_errinfob* this_, const char* id) AUB_NOTHROW
        {
            return aub::incget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_errinfob* this_) AUB_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_errinfob* this_) AUB_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static int
        num_(aug_errinfob* this_) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->errinfobnum_();
        }
        static char*
        desc_(aug_errinfob* this_, char* dst, size_t size) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->errinfobdesc_(dst, size);
        }
        static const aug_errinfobvtbl*
        vtbl()
        {
            static const aug_errinfobvtbl local = {
                cast_,
                retain_,
                release_,
                num_,
                desc_
            };
            return &local;
        }
    public:
        explicit
        errinfob(T* impl = 0)
        {
            this->errinfob_.vtbl_ = this->vtbl();
            this->errinfob_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->errinfob_.impl_ = impl;
        }
        aug_errinfob*
        get() AUB_NOTHROW
        {
            return &this->errinfob_;
        }
        operator aub::obref<aug_errinfob>() AUB_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_errinfob {
        errinfob<basic_errinfob<T> > errinfob_;
        T impl_;
        int refs_;
        explicit
        basic_errinfob(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->errinfob_.reset(this);
        }
    public:
        aub::smartob<aub_object>
        cast_(const char* id) AUB_NOTHROW
        {
            if (aub::equalid<aub_object>(id) || aub::equalid<aug_errinfob>(id))
                return aub::object_retain<aub_object>(this->errinfob_);
            return null;
        }
        void
        retain_() AUB_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUB_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        int
        errinfobnum_() AUB_NOTHROW
        {
            return this->impl_.errinfobnum_();
        }
        char*
        errinfobdesc_(char* dst, size_t size) AUB_NOTHROW
        {
            return this->impl_.errinfobdesc_(dst, size);
        }
        static aub::smartob<aug_errinfob>
        create(const T& impl = T())
        {
            basic_errinfob* ptr(new basic_errinfob(impl));
            return aub::object_attach<aug_errinfob>(ptr->errinfob_);
        }
    };

    template <typename T>
    class scoped_errinfob {
        errinfob<scoped_errinfob<T> > errinfob_;
        T impl_;
    public:
        explicit
        scoped_errinfob(const T& impl = T())
            : impl_(impl)
        {
            this->errinfob_.reset(this);
        }
        aub::smartob<aub_object>
        cast_(const char* id) AUB_NOTHROW
        {
            if (aub::equalid<aub_object>(id) || aub::equalid<aug_errinfob>(id))
                return aub::object_retain<aub_object>(this->errinfob_);
            return null;
        }
        void
        retain_() AUB_NOTHROW
        {
        }
        void
        release_() AUB_NOTHROW
        {
        }
        int
        errinfobnum_() AUB_NOTHROW
        {
            return this->impl_.errinfobnum_();
        }
        char*
        errinfobdesc_(char* dst, size_t size) AUB_NOTHROW
        {
            return this->impl_.errinfobdesc_(dst, size);
        }
        aub_object*
        base() AUB_NOTHROW
        {
            return aub::obref<aub_object>(this->errinfob_).get();
        }
        aug_errinfob*
        get() AUB_NOTHROW
        {
            return this->errinfob_.get();
        }
        operator aub::obref<aug_errinfob>() AUB_NOTHROW
        {
            return this->errinfob_;
        }
    };
}
#endif /* __cplusplus */

#endif /* AUG_ERRINFOB_H */
