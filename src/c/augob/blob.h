/* -*- c++ -*- */
/* Automatically generated by aubidl */
/* at Fri Jan 25 21:30:52 GMT Standard Time 2008 */

#ifndef AUG_BLOB_H
#define AUG_BLOB_H

#include "aub.h"

#if defined(__cplusplus)

#include "aubpp.hpp"

# if !defined(AUB_NOTHROW)
#  define AUB_NOTHROW
# endif /* !AUB_NOTHROW */

namespace aub {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/**
 * @defgroup aug_blob aug_blob
 *
 * @ingroup Object
 *
 * @{
 */

AUB_INTERFACE(aug_blob);

struct aug_blobvtbl {
    AUB_VTBL(aug_blob);
    const void* (*data_)(aug_blob*, size_t*);
    size_t (*size_)(aug_blob*);
};

#define aug_blobdata(this_, size) \
    ((aug_blob*)this_)->vtbl_->data_(this_, size)

#define aug_blobsize(this_) \
    ((aug_blob*)this_)->vtbl_->size_(this_)

/** @} */

#if defined(__cplusplus)
namespace aub {
    template <>
    struct object_traits<aug_blob> {
        typedef aug_blobvtbl vtbl;
        static const char*
        id() AUB_NOTHROW
        {
            return aug_blobid;
        }
    };
}

namespace aug {

    typedef aub::obref<aug_blob> blobref;

    inline const void*
    blobdata(aub::obref<aug_blob> this_, size_t* size) AUB_NOTHROW
    {
        return this_.get()->vtbl_->data_(this_.get(), size);
    }

    inline size_t
    blobsize(aub::obref<aug_blob> this_) AUB_NOTHROW
    {
        return this_.get()->vtbl_->size_(this_.get());
    }

    template <typename T>
    class blob {

        aug_blob blob_;

        blob(const blob&);

        blob&
        operator =(const blob&);

        static void*
        cast_(aug_blob* this_, const char* id) AUB_NOTHROW
        {
            return aub::incget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_blob* this_) AUB_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_blob* this_) AUB_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static const void*
        data_(aug_blob* this_, size_t* size) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->blobdata_(size);
        }
        static size_t
        size_(aug_blob* this_) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->blobsize_();
        }
        static const aug_blobvtbl*
        vtbl()
        {
            static const aug_blobvtbl local = {
                cast_,
                retain_,
                release_,
                data_,
                size_
            };
            return &local;
        }
    public:
        explicit
        blob(T* impl = 0)
        {
            this->blob_.vtbl_ = this->vtbl();
            this->blob_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->blob_.impl_ = impl;
        }
        aug_blob*
        get() AUB_NOTHROW
        {
            return &this->blob_;
        }
        operator aub::obref<aug_blob>() AUB_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_blob {
        blob<basic_blob<T> > blob_;
        T impl_;
        int refs_;
        explicit
        basic_blob(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->blob_.reset(this);
        }
    public:
        aub::smartob<aub_object>
        cast_(const char* id) AUB_NOTHROW
        {
            if (aub::equalid<aub_object>(id) || aub::equalid<aug_blob>(id))
                return aub::object_retain<aub_object>(this->blob_);
            return null;
        }
        void
        retain_() AUB_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUB_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        const void*
        blobdata_(size_t* size) AUB_NOTHROW
        {
            return this->impl_.blobdata_(size);
        }
        size_t
        blobsize_() AUB_NOTHROW
        {
            return this->impl_.blobsize_();
        }
        static aub::smartob<aug_blob>
        create(const T& impl = T())
        {
            basic_blob* ptr(new basic_blob(impl));
            return aub::object_attach<aug_blob>(ptr->blob_);
        }
    };

    template <typename T>
    class scoped_blob {
        blob<scoped_blob<T> > blob_;
        T impl_;
    public:
        explicit
        scoped_blob(const T& impl = T())
            : impl_(impl)
        {
            this->blob_.reset(this);
        }
        aub::smartob<aub_object>
        cast_(const char* id) AUB_NOTHROW
        {
            if (aub::equalid<aub_object>(id) || aub::equalid<aug_blob>(id))
                return aub::object_retain<aub_object>(this->blob_);
            return null;
        }
        void
        retain_() AUB_NOTHROW
        {
        }
        void
        release_() AUB_NOTHROW
        {
        }
        const void*
        blobdata_(size_t* size) AUB_NOTHROW
        {
            return this->impl_.blobdata_(size);
        }
        size_t
        blobsize_() AUB_NOTHROW
        {
            return this->impl_.blobsize_();
        }
        aub_object*
        base() AUB_NOTHROW
        {
            return aub::obref<aub_object>(this->blob_).get();
        }
        aug_blob*
        get() AUB_NOTHROW
        {
            return this->blob_.get();
        }
        operator aub::obref<aug_blob>() AUB_NOTHROW
        {
            return this->blob_;
        }
    };
}
#endif /* __cplusplus */

#endif /* AUG_BLOB_H */
