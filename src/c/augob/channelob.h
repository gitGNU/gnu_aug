/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Thu May 15 18:55:06 GMT Daylight Time 2008 */

#ifndef AUGOB_CHANNELOB_H
#define AUGOB_CHANNELOB_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */
#include "augob/streamob.h"
typedef aug_bool
    (*aug_channelcb_t)(aug_streamob*, unsigned short);

/**
 * @defgroup aug_channelob aug_channelob
 *
 * @ingroup Object
 *
 * @{
 */

AUG_INTERFACE(aug_channelob);

struct aug_channelobvtbl {
    AUG_VTBL(aug_channelob);
    aug_result (*close_)(aug_channelob*);
    aug_channelob* (*process_)(aug_channelob*, aug_channelcb_t, aug_bool*);
    aug_result (*setnonblock_)(aug_channelob*, aug_bool);
    aug_result (*seteventmask_)(aug_channelob*, unsigned short);
    int (*eventmask_)(aug_channelob*);
    int (*events_)(aug_channelob*);
};

#define aug_close(this_) \
    (this_)->vtbl_->close_(this_)

#define aug_process(this_, cb, fork) \
    (this_)->vtbl_->process_(this_, cb, fork)

#define aug_setnonblock(this_, on) \
    (this_)->vtbl_->setnonblock_(this_, on)

#define aug_seteventmask(this_, mask) \
    (this_)->vtbl_->seteventmask_(this_, mask)

#define aug_eventmask(this_) \
    (this_)->vtbl_->eventmask_(this_)

#define aug_events(this_) \
    (this_)->vtbl_->events_(this_)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_channelob> {
        typedef aug_channelobvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_channelobid;
        }
    };
}

namespace aug {

    typedef aug::obref<aug_channelob> channelobref;

    inline aug_result
    close(aug::obref<aug_channelob> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->close_(this_.get());
    }

    inline aug::smartob<aug_channelob>
    process(aug::obref<aug_channelob> this_, aug_channelcb_t cb, aug_bool& fork) AUG_NOTHROW
    {
        return aug::object_attach<aug_channelob>(this_.get()->vtbl_->process_(this_.get(), cb, &fork));
    }

    inline aug_result
    setnonblock(aug::obref<aug_channelob> this_, aug_bool on) AUG_NOTHROW
    {
        return this_.get()->vtbl_->setnonblock_(this_.get(), on);
    }

    inline aug_result
    seteventmask(aug::obref<aug_channelob> this_, unsigned short mask) AUG_NOTHROW
    {
        return this_.get()->vtbl_->seteventmask_(this_.get(), mask);
    }

    inline int
    eventmask(aug::obref<aug_channelob> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->eventmask_(this_.get());
    }

    inline int
    events(aug::obref<aug_channelob> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->events_(this_.get());
    }

    template <typename T>
    class channelob {

        aug_channelob channelob_;

        channelob(const channelob&);

        channelob&
        operator =(const channelob&);

        static void*
        cast_(aug_channelob* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_channelob* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_channelob* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static aug_result
        close_(aug_channelob* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->close_();
        }
        static aug_channelob*
        process_(aug_channelob* this_, aug_channelcb_t cb, aug_bool* fork) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->process_(cb, fork));
        }
        static aug_result
        setnonblock_(aug_channelob* this_, aug_bool on) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->setnonblock_(on);
        }
        static aug_result
        seteventmask_(aug_channelob* this_, unsigned short mask) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->seteventmask_(mask);
        }
        static int
        eventmask_(aug_channelob* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->eventmask_();
        }
        static int
        events_(aug_channelob* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->events_();
        }
        static const aug_channelobvtbl*
        vtbl()
        {
            static const aug_channelobvtbl local = {
                cast_,
                retain_,
                release_,
                close_,
                process_,
                setnonblock_,
                seteventmask_,
                eventmask_,
                events_
            };
            return &local;
        }
    public:
        explicit
        channelob(T* impl = 0)
        {
            this->channelob_.vtbl_ = this->vtbl();
            this->channelob_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->channelob_.impl_ = impl;
        }
        aug_channelob*
        get() AUG_NOTHROW
        {
            return &this->channelob_;
        }
        operator aug::obref<aug_channelob>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_channelob {
        channelob<basic_channelob<T> > channelob_;
        T impl_;
        int refs_;
        explicit
        basic_channelob(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->channelob_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_channelob>(id))
                return aug::object_retain<aug_object>(this->channelob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        aug_result
        close_() AUG_NOTHROW
        {
            return this->impl_.close_();
        }
        aug::smartob<aug_channelob>
        process_(aug_channelcb_t cb, aug_bool& fork) AUG_NOTHROW
        {
            return this->impl_.process_(cb, fork);
        }
        aug_result
        setnonblock_(aug_bool on) AUG_NOTHROW
        {
            return this->impl_.setnonblock_(on);
        }
        aug_result
        seteventmask_(unsigned short mask) AUG_NOTHROW
        {
            return this->impl_.seteventmask_(mask);
        }
        int
        eventmask_() AUG_NOTHROW
        {
            return this->impl_.eventmask_();
        }
        int
        events_() AUG_NOTHROW
        {
            return this->impl_.events_();
        }
        static aug::smartob<aug_channelob>
        create(const T& impl = T())
        {
            basic_channelob* ptr(new basic_channelob(impl));
            return aug::object_attach<aug_channelob>(ptr->channelob_);
        }
    };

    template <typename T>
    class scoped_channelob {
        channelob<scoped_channelob<T> > channelob_;
        T impl_;
    public:
        explicit
        scoped_channelob(const T& impl = T())
            : impl_(impl)
        {
            this->channelob_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_channelob>(id))
                return aug::object_retain<aug_object>(this->channelob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_result
        close_() AUG_NOTHROW
        {
            return this->impl_.close_();
        }
        aug::smartob<aug_channelob>
        process_(aug_channelcb_t cb, aug_bool& fork) AUG_NOTHROW
        {
            return this->impl_.process_(cb, fork);
        }
        aug_result
        setnonblock_(aug_bool on) AUG_NOTHROW
        {
            return this->impl_.setnonblock_(on);
        }
        aug_result
        seteventmask_(unsigned short mask) AUG_NOTHROW
        {
            return this->impl_.seteventmask_(mask);
        }
        int
        eventmask_() AUG_NOTHROW
        {
            return this->impl_.eventmask_();
        }
        int
        events_() AUG_NOTHROW
        {
            return this->impl_.events_();
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->channelob_).get();
        }
        aug_channelob*
        get() AUG_NOTHROW
        {
            return this->channelob_.get();
        }
        operator aug::obref<aug_channelob>() AUG_NOTHROW
        {
            return this->channelob_;
        }
    };
}
#endif /* __cplusplus */

#endif /* AUGOB_CHANNELOB_H */
