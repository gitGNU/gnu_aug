/* -*- c++ -*- */
/* Automatically generated by aubidl */
/* at Sat Dec 22 21:00:22 GMT Standard Time 2007 */

#ifndef AUG_LONGOB_H
#define AUG_LONGOB_H

#include "aub.h"

#if defined(__cplusplus)

#include "aubpp.hpp"

# if !defined(AUB_NOTHROW)
#  define AUB_NOTHROW
# endif /* !AUB_NOTHROW */

namespace aub {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/**
 * @defgroup aug_longob aug_longob
 *
 * @ingroup Object
 *
 * @{
 */

AUB_OBJECTDECL(aug_longob);
struct aug_longobvtbl {
    AUB_OBJECT(aug_longob);
    long (*get_)(aug_longob*);
};

#define aug_getlongob(this_) \
    ((aug_longob*)this_)->vtbl_->get_(this_)

/** @} */

#if defined(__cplusplus)
namespace aub {
    template <>
    struct object_traits<aug_longob> {
        typedef aug_longobvtbl vtbl;
        static const char*
        id() AUB_NOTHROW
        {
            return aug_longobid;
        }
    };
}

namespace aug {

    typedef aub::obref<aug_longob> longobref;

    inline long
    getlongob(aub::obref<aug_longob> this_) AUB_NOTHROW
    {
        return this_.get()->vtbl_->get_(this_.get());
    }

    template <typename T>
    class longob {

        aug_longob longob_;

        longob(const longob&);

        longob&
        operator =(const longob&);

        static void*
        cast_(aug_longob* this_, const char* id) AUB_NOTHROW
        {
            return aub::incget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static int
        retain_(aug_longob* this_) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->retain_();
        }
        static int
        release_(aug_longob* this_) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->release_();
        }
        static long
        get_(aug_longob* this_) AUB_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getlongob_();
        }
        static const aug_longobvtbl*
        vtbl()
        {
            static const aug_longobvtbl local = {
                cast_,
                retain_,
                release_,
                get_
            };
            return &local;
        }
    public:
        explicit
        longob(T* impl = 0)
        {
            this->longob_.vtbl_ = this->vtbl();
            this->longob_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->longob_.impl_ = impl;
        }
        aug_longob*
        get() AUB_NOTHROW
        {
            return &this->longob_;
        }
        operator aub::obref<aug_longob>() AUB_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_longob {
        longob<basic_longob<T> > longob_;
        T impl_;
        int refs_;
        explicit
        basic_longob(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->longob_.reset(this);
        }
    public:
        aub::smartob<aub_object>
        cast_(const char* id) AUB_NOTHROW
        {
            if (aub::equalid<aub_object>(id) || aub::equalid<aug_longob>(id))
                return aub::object_retain<aub_object>(this->longob_);
            return null;
        }
        int
        retain_() AUB_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
            return 0;
        }
        int
        release_() AUB_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
            return 0;
        }
        long
        getlongob_() AUB_NOTHROW
        {
            return this->impl_.getlongob_();
        }
        static aub::smartob<aug_longob>
        create(const T& impl = T())
        {
            basic_longob* ptr(new basic_longob(impl));
            return aub::object_attach<aug_longob>(ptr->longob_);
        }
    };

    template <typename T>
    class scoped_longob {
        longob<scoped_longob<T> > longob_;
        T impl_;
    public:
        explicit
        scoped_longob(const T& impl = T())
            : impl_(impl)
        {
            this->longob_.reset(this);
        }
        aub::smartob<aub_object>
        cast_(const char* id) AUB_NOTHROW
        {
            if (aub::equalid<aub_object>(id) || aub::equalid<aug_longob>(id))
                return aub::object_retain<aub_object>(this->longob_);
            return null;
        }
        int
        retain_() AUB_NOTHROW
        {
            return 0;
        }
        int
        release_() AUB_NOTHROW
        {
            return 0;
        }
        long
        getlongob_() AUB_NOTHROW
        {
            return this->impl_.getlongob_();
        }
        aub_object*
        base() AUB_NOTHROW
        {
            return aub::obref<aub_object>(this->longob_).get();
        }
        aug_longob*
        get() AUB_NOTHROW
        {
            return this->longob_.get();
        }
        operator aub::obref<aug_longob>() AUB_NOTHROW
        {
            return this->longob_;
        }
    };
}
#endif /* __cplusplus */

#endif /* AUG_LONGOB_H */
