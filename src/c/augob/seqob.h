/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Tue Feb 05 08:40:58 +0000 2008 */

#ifndef AUGOB_SEQOB_H
#define AUGOB_SEQOB_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */
#include "augob/iterob.h"

/**
 * @defgroup aug_seqob aug_seqob
 *
 * @ingroup Object
 *
 * @{
 */

AUG_INTERFACE(aug_seqob);

/**
 * Read-only, base interface for all container types.  Suitable for both
 * sequential and associative containers.
 */

struct aug_seqobvtbl {
    AUG_VTBL(aug_seqob);
    struct aug_var* (*find_)(aug_seqob*, struct aug_var*, const struct aug_var*);
    aug_iterob* (*begin_)(aug_seqob*);
    int (*empty_)(aug_seqob*);
    unsigned (*size_)(aug_seqob*);
};

/**
 * Get item specified by @a key.
 * @param this_ The object.
 * @param value Output value.
 * @param key Value's key.
 * @return @a value, or NULL on error.
 */

#define aug_findseqob(this_, value, key) \
    (this_)->vtbl_->find_(this_, value, key)

/**
 * Get first item.
 * @param this_ The object.
 * @return Iterator, or NULL on error.
 */

#define aug_seqobbegin(this_) \
    (this_)->vtbl_->begin_(this_)

/**
 * Is empty test.
 * @param this_ The object.
 * @return True if empty.
 */

#define aug_seqobempty(this_) \
    (this_)->vtbl_->empty_(this_)

/**
 * Get number of items.
 * @param this_ The object.
 * @return Number of items.
 */

#define aug_seqobsize(this_) \
    (this_)->vtbl_->size_(this_)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_seqob> {
        typedef aug_seqobvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_seqobid;
        }
    };
}

namespace aug {

    typedef aug::obref<aug_seqob> seqobref;

    inline struct aug_var*
    findseqob(aug::obref<aug_seqob> this_, struct aug_var* value, const struct aug_var* key) AUG_NOTHROW
    {
        return this_.get()->vtbl_->find_(this_.get(), value, key);
    }

    inline aug::smartob<aug_iterob>
    seqobbegin(aug::obref<aug_seqob> this_) AUG_NOTHROW
    {
        return aug::object_attach<aug_iterob>(this_.get()->vtbl_->begin_(this_.get()));
    }

    inline int
    seqobempty(aug::obref<aug_seqob> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->empty_(this_.get());
    }

    inline unsigned
    seqobsize(aug::obref<aug_seqob> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->size_(this_.get());
    }

    template <typename T>
    class seqob {

        aug_seqob seqob_;

        seqob(const seqob&);

        seqob&
        operator =(const seqob&);

        static void*
        cast_(aug_seqob* this_, const char* id) AUG_NOTHROW
        {
            return aug::incget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_seqob* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_seqob* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static struct aug_var*
        find_(aug_seqob* this_, struct aug_var* value, const struct aug_var* key) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->findseqob_(value, key);
        }
        static aug_iterob*
        begin_(aug_seqob* this_) AUG_NOTHROW
        {
            return aug::incget(static_cast<T*>(this_->impl_)->seqobbegin_());
        }
        static int
        empty_(aug_seqob* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->seqobempty_();
        }
        static unsigned
        size_(aug_seqob* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->seqobsize_();
        }
        static const aug_seqobvtbl*
        vtbl()
        {
            static const aug_seqobvtbl local = {
                cast_,
                retain_,
                release_,
                find_,
                begin_,
                empty_,
                size_
            };
            return &local;
        }
    public:
        explicit
        seqob(T* impl = 0)
        {
            this->seqob_.vtbl_ = this->vtbl();
            this->seqob_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->seqob_.impl_ = impl;
        }
        aug_seqob*
        get() AUG_NOTHROW
        {
            return &this->seqob_;
        }
        operator aug::obref<aug_seqob>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_seqob {
        seqob<basic_seqob<T> > seqob_;
        T impl_;
        int refs_;
        explicit
        basic_seqob(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->seqob_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_seqob>(id))
                return aug::object_retain<aug_object>(this->seqob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        struct aug_var*
        findseqob_(struct aug_var* value, const struct aug_var* key) AUG_NOTHROW
        {
            return this->impl_.findseqob_(value, key);
        }
        aug::smartob<aug_iterob>
        seqobbegin_() AUG_NOTHROW
        {
            return this->impl_.seqobbegin_();
        }
        int
        seqobempty_() AUG_NOTHROW
        {
            return this->impl_.seqobempty_();
        }
        unsigned
        seqobsize_() AUG_NOTHROW
        {
            return this->impl_.seqobsize_();
        }
        static aug::smartob<aug_seqob>
        create(const T& impl = T())
        {
            basic_seqob* ptr(new basic_seqob(impl));
            return aug::object_attach<aug_seqob>(ptr->seqob_);
        }
    };

    template <typename T>
    class scoped_seqob {
        seqob<scoped_seqob<T> > seqob_;
        T impl_;
    public:
        explicit
        scoped_seqob(const T& impl = T())
            : impl_(impl)
        {
            this->seqob_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_seqob>(id))
                return aug::object_retain<aug_object>(this->seqob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        struct aug_var*
        findseqob_(struct aug_var* value, const struct aug_var* key) AUG_NOTHROW
        {
            return this->impl_.findseqob_(value, key);
        }
        aug::smartob<aug_iterob>
        seqobbegin_() AUG_NOTHROW
        {
            return this->impl_.seqobbegin_();
        }
        int
        seqobempty_() AUG_NOTHROW
        {
            return this->impl_.seqobempty_();
        }
        unsigned
        seqobsize_() AUG_NOTHROW
        {
            return this->impl_.seqobsize_();
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->seqob_).get();
        }
        aug_seqob*
        get() AUG_NOTHROW
        {
            return this->seqob_.get();
        }
        operator aug::obref<aug_seqob>() AUG_NOTHROW
        {
            return this->seqob_;
        }
    };
}
#endif /* __cplusplus */

#endif /* AUGOB_SEQOB_H */
