/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Sat May 17 15:37:39 GMT Daylight Time 2008 */

#ifndef AUGOB_STREAMOB_H
#define AUGOB_STREAMOB_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */
#include "augtypes.h"
struct iovec;

/**
 * @defgroup aug_streamob aug_streamob
 *
 * @ingroup Object
 *
 * @{
 */

AUG_INTERFACE(aug_streamob);

struct aug_streamobvtbl {
    AUG_VTBL(aug_streamob);
    aug_result (*shutdown_)(aug_streamob*);
    ssize_t (*read_)(aug_streamob*, void*, size_t);
    ssize_t (*readv_)(aug_streamob*, const struct iovec*, int);
    ssize_t (*write_)(aug_streamob*, const void*, size_t);
    ssize_t (*writev_)(aug_streamob*, const struct iovec*, int);
};

#define aug_shutdown(this_) \
    (this_)->vtbl_->shutdown_(this_)

#define aug_read(this_, buf, size) \
    (this_)->vtbl_->read_(this_, buf, size)

#define aug_readv(this_, iov, size) \
    (this_)->vtbl_->readv_(this_, iov, size)

#define aug_write(this_, buf, size) \
    (this_)->vtbl_->write_(this_, buf, size)

#define aug_writev(this_, iov, size) \
    (this_)->vtbl_->writev_(this_, iov, size)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_streamob> {
        typedef aug_streamobvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_streamobid;
        }
    };
}

namespace aug {

    typedef aug::obref<aug_streamob> streamobref;

    inline aug_result
    shutdown(aug::obref<aug_streamob> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->shutdown_(this_.get());
    }

    inline ssize_t
    read(aug::obref<aug_streamob> this_, void* buf, size_t size) AUG_NOTHROW
    {
        return this_.get()->vtbl_->read_(this_.get(), buf, size);
    }

    inline ssize_t
    readv(aug::obref<aug_streamob> this_, const struct iovec* iov, int size) AUG_NOTHROW
    {
        return this_.get()->vtbl_->readv_(this_.get(), iov, size);
    }

    inline ssize_t
    write(aug::obref<aug_streamob> this_, const void* buf, size_t size) AUG_NOTHROW
    {
        return this_.get()->vtbl_->write_(this_.get(), buf, size);
    }

    inline ssize_t
    writev(aug::obref<aug_streamob> this_, const struct iovec* iov, int size) AUG_NOTHROW
    {
        return this_.get()->vtbl_->writev_(this_.get(), iov, size);
    }

    template <typename T>
    class streamob {

        aug_streamob streamob_;

        streamob(const streamob&);

        streamob&
        operator =(const streamob&);

        static void*
        cast_(aug_streamob* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_streamob* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_streamob* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static aug_result
        shutdown_(aug_streamob* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->shutdown_();
        }
        static ssize_t
        read_(aug_streamob* this_, void* buf, size_t size) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->read_(buf, size);
        }
        static ssize_t
        readv_(aug_streamob* this_, const struct iovec* iov, int size) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->readv_(iov, size);
        }
        static ssize_t
        write_(aug_streamob* this_, const void* buf, size_t size) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->write_(buf, size);
        }
        static ssize_t
        writev_(aug_streamob* this_, const struct iovec* iov, int size) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->writev_(iov, size);
        }
        static const aug_streamobvtbl*
        vtbl()
        {
            static const aug_streamobvtbl local = {
                cast_,
                retain_,
                release_,
                shutdown_,
                read_,
                readv_,
                write_,
                writev_
            };
            return &local;
        }
    public:
        explicit
        streamob(T* impl = 0)
        {
            this->streamob_.vtbl_ = this->vtbl();
            this->streamob_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->streamob_.impl_ = impl;
        }
        aug_streamob*
        get() AUG_NOTHROW
        {
            return &this->streamob_;
        }
        operator aug::obref<aug_streamob>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_streamob {
        streamob<basic_streamob<T> > streamob_;
        T impl_;
        int refs_;
        explicit
        basic_streamob(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->streamob_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_streamob>(id))
                return aug::object_retain<aug_object>(this->streamob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        aug_result
        shutdown_() AUG_NOTHROW
        {
            return this->impl_.shutdown_();
        }
        ssize_t
        read_(void* buf, size_t size) AUG_NOTHROW
        {
            return this->impl_.read_(buf, size);
        }
        ssize_t
        readv_(const struct iovec* iov, int size) AUG_NOTHROW
        {
            return this->impl_.readv_(iov, size);
        }
        ssize_t
        write_(const void* buf, size_t size) AUG_NOTHROW
        {
            return this->impl_.write_(buf, size);
        }
        ssize_t
        writev_(const struct iovec* iov, int size) AUG_NOTHROW
        {
            return this->impl_.writev_(iov, size);
        }
        static aug::smartob<aug_streamob>
        create(const T& impl = T())
        {
            basic_streamob* ptr(new basic_streamob(impl));
            return aug::object_attach<aug_streamob>(ptr->streamob_);
        }
    };

    template <typename T>
    class scoped_streamob {
        streamob<scoped_streamob<T> > streamob_;
        T impl_;
    public:
        explicit
        scoped_streamob(const T& impl = T())
            : impl_(impl)
        {
            this->streamob_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_streamob>(id))
                return aug::object_retain<aug_object>(this->streamob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_result
        shutdown_() AUG_NOTHROW
        {
            return this->impl_.shutdown_();
        }
        ssize_t
        read_(void* buf, size_t size) AUG_NOTHROW
        {
            return this->impl_.read_(buf, size);
        }
        ssize_t
        readv_(const struct iovec* iov, int size) AUG_NOTHROW
        {
            return this->impl_.readv_(iov, size);
        }
        ssize_t
        write_(const void* buf, size_t size) AUG_NOTHROW
        {
            return this->impl_.write_(buf, size);
        }
        ssize_t
        writev_(const struct iovec* iov, int size) AUG_NOTHROW
        {
            return this->impl_.writev_(iov, size);
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->streamob_).get();
        }
        aug_streamob*
        get() AUG_NOTHROW
        {
            return this->streamob_.get();
        }
        operator aug::obref<aug_streamob>() AUG_NOTHROW
        {
            return this->streamob_;
        }
    };

    typedef aug::smartob<aug_streamob> streamobptr;
}
#endif /* __cplusplus */

#endif /* AUGOB_STREAMOB_H */
