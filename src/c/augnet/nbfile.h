/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Wed Apr 30 07:15:12 GMT Daylight Time 2008 */

#ifndef AUGNET_NBFILE_H
#define AUGNET_NBFILE_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */
#include "augnet/extend.h"

/**
 * @defgroup aug_nbfile aug_nbfile
 *
 * @ingroup Object
 *
 * @{
 */

AUG_INTERFACE(aug_nbfile);

struct aug_nbfilevtbl {
    AUG_VTBL(aug_nbfile);
    aug_bool (*process_)(aug_nbfile*, aug_object*);
    int (*shutdown_)(aug_nbfile*);
    int (*seteventmask_)(aug_nbfile*, unsigned short);
    int (*eventmask_)(aug_nbfile*);
    int (*events_)(aug_nbfile*);
};

#define aug_processnb(this_, ob) \
    (this_)->vtbl_->process_(this_, ob)

#define aug_shutdownnb(this_) \
    (this_)->vtbl_->shutdown_(this_)

#define aug_setnbeventmask(this_, mask) \
    (this_)->vtbl_->seteventmask_(this_, mask)

#define aug_nbeventmask(this_) \
    (this_)->vtbl_->eventmask_(this_)

#define aug_nbevents(this_) \
    (this_)->vtbl_->events_(this_)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_nbfile> {
        typedef aug_nbfilevtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_nbfileid;
        }
    };
}

namespace aug {

    typedef aug::obref<aug_nbfile> nbfileref;

    inline aug_bool
    processnb(aug::obref<aug_nbfile> this_, aug::obref<aug_object> ob) AUG_NOTHROW
    {
        return this_.get()->vtbl_->process_(this_.get(), ob.get());
    }

    inline int
    shutdownnb(aug::obref<aug_nbfile> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->shutdown_(this_.get());
    }

    inline int
    setnbeventmask(aug::obref<aug_nbfile> this_, unsigned short mask) AUG_NOTHROW
    {
        return this_.get()->vtbl_->seteventmask_(this_.get(), mask);
    }

    inline int
    nbeventmask(aug::obref<aug_nbfile> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->eventmask_(this_.get());
    }

    inline int
    nbevents(aug::obref<aug_nbfile> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->events_(this_.get());
    }

    template <typename T>
    class nbfile {

        aug_nbfile nbfile_;

        nbfile(const nbfile&);

        nbfile&
        operator =(const nbfile&);

        static void*
        cast_(aug_nbfile* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_nbfile* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_nbfile* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static aug_bool
        process_(aug_nbfile* this_, aug_object* ob) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->processnb_(ob);
        }
        static int
        shutdown_(aug_nbfile* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->shutdownnb_();
        }
        static int
        seteventmask_(aug_nbfile* this_, unsigned short mask) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->setnbeventmask_(mask);
        }
        static int
        eventmask_(aug_nbfile* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->nbeventmask_();
        }
        static int
        events_(aug_nbfile* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->nbevents_();
        }
        static const aug_nbfilevtbl*
        vtbl()
        {
            static const aug_nbfilevtbl local = {
                cast_,
                retain_,
                release_,
                process_,
                shutdown_,
                seteventmask_,
                eventmask_,
                events_
            };
            return &local;
        }
    public:
        explicit
        nbfile(T* impl = 0)
        {
            this->nbfile_.vtbl_ = this->vtbl();
            this->nbfile_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->nbfile_.impl_ = impl;
        }
        aug_nbfile*
        get() AUG_NOTHROW
        {
            return &this->nbfile_;
        }
        operator aug::obref<aug_nbfile>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_nbfile {
        nbfile<basic_nbfile<T> > nbfile_;
        T impl_;
        int refs_;
        explicit
        basic_nbfile(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->nbfile_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_nbfile>(id))
                return aug::object_retain<aug_object>(this->nbfile_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        aug_bool
        processnb_(aug::obref<aug_object> ob) AUG_NOTHROW
        {
            return this->impl_.processnb_(ob);
        }
        int
        shutdownnb_() AUG_NOTHROW
        {
            return this->impl_.shutdownnb_();
        }
        int
        setnbeventmask_(unsigned short mask) AUG_NOTHROW
        {
            return this->impl_.setnbeventmask_(mask);
        }
        int
        nbeventmask_() AUG_NOTHROW
        {
            return this->impl_.nbeventmask_();
        }
        int
        nbevents_() AUG_NOTHROW
        {
            return this->impl_.nbevents_();
        }
        static aug::smartob<aug_nbfile>
        create(const T& impl = T())
        {
            basic_nbfile* ptr(new basic_nbfile(impl));
            return aug::object_attach<aug_nbfile>(ptr->nbfile_);
        }
    };

    template <typename T>
    class scoped_nbfile {
        nbfile<scoped_nbfile<T> > nbfile_;
        T impl_;
    public:
        explicit
        scoped_nbfile(const T& impl = T())
            : impl_(impl)
        {
            this->nbfile_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_nbfile>(id))
                return aug::object_retain<aug_object>(this->nbfile_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_bool
        processnb_(aug::obref<aug_object> ob) AUG_NOTHROW
        {
            return this->impl_.processnb_(ob);
        }
        int
        shutdownnb_() AUG_NOTHROW
        {
            return this->impl_.shutdownnb_();
        }
        int
        setnbeventmask_(unsigned short mask) AUG_NOTHROW
        {
            return this->impl_.setnbeventmask_(mask);
        }
        int
        nbeventmask_() AUG_NOTHROW
        {
            return this->impl_.nbeventmask_();
        }
        int
        nbevents_() AUG_NOTHROW
        {
            return this->impl_.nbevents_();
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->nbfile_).get();
        }
        aug_nbfile*
        get() AUG_NOTHROW
        {
            return this->nbfile_.get();
        }
        operator aug::obref<aug_nbfile>() AUG_NOTHROW
        {
            return this->nbfile_;
        }
    };
}
#endif /* __cplusplus */
AUGNET_API aug_nbfiles_t
aug_createnbfiles(void);

AUGNET_API int
aug_destroynbfiles(aug_nbfiles_t nbfiles);

/**
 * Once inserted, a call to aug_close() will remove the file from the nbfiles
 * set.
 */

AUGNET_API int
aug_insertnbfile(aug_nbfiles_t nbfiles, aug_md md, aug_nbfilecb_t cb,
                 aug_object* ob);

/**
 * Can be used to remove a file without closing it.
 */

AUGNET_API int
aug_removenbfile(aug_md md);

AUGNET_API int
aug_foreachnbfile(aug_nbfiles_t nbfiles);

AUGNET_API int
aug_emptynbfiles(aug_nbfiles_t nbfiles);

/**
 * @return A positive value if events are pending: there is no gaurantee this
 * this value be representative of the actual number of events pending.
 */

AUGNET_API int
aug_waitnbevents(aug_nbfiles_t nbfiles, const struct timeval* timeout);

#endif /* AUGNET_NBFILE_H */
