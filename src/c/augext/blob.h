/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Sat Nov 15 10:22:59 GMT Standard Time 2008 */

#ifndef AUGEXT_BLOB_H
#define AUGEXT_BLOB_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/* Includes. */


/* Interface declarations. */

AUG_INTERFACE(aug_blob);

/* Interface definitions. */

/**
 * @defgroup aug_blob aug_blob
 *
 * @ingroup Object
 *
 * @{
 */

struct aug_blobvtbl {
    AUG_VTBL(aug_blob);
    const void* (*getdata_)(aug_blob*, size_t*);
    size_t (*getsize_)(aug_blob*);
};

#define aug_getblobdata(this_, size) \
    (this_)->vtbl_->getdata_(this_, size)

#define aug_getblobsize(this_) \
    (this_)->vtbl_->getsize_(this_)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_blob> {
        typedef aug_blobvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_blobid;
        }
    };
}

namespace aug {

    template <typename T>
    class blob {

        aug_blob blob_;

        blob(const blob&);

        blob&
        operator =(const blob&);

        static void*
        cast_(aug_blob* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_blob* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_blob* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static const void*
        getdata_(aug_blob* this_, size_t* size) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getblobdata_(size);
        }
        static size_t
        getsize_(aug_blob* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getblobsize_();
        }
        static const aug_blobvtbl*
        vtbl()
        {
            static const aug_blobvtbl local = {
                cast_,
                retain_,
                release_,
                getdata_,
                getsize_
            };
            return &local;
        }
    public:
        explicit
        blob(T* impl = 0)
        {
            this->blob_.vtbl_ = this->vtbl();
            this->blob_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->blob_.impl_ = impl;
        }
        aug_blob*
        get() AUG_NOTHROW
        {
            return &this->blob_;
        }
        operator aug::obref<aug_blob>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    typedef aug::obref<aug_blob> blobref;
    typedef aug::smartob<aug_blob> blobptr;
}
#endif /* __cplusplus */

/* C++ definitions. */

#if defined(__cplusplus)
namespace aug {

    inline const void*
    getblobdata(aug::obref<aug_blob> this_, size_t* size) AUG_NOTHROW
    {
        return this_.get()->vtbl_->getdata_(this_.get(), size);
    }

    inline size_t
    getblobsize(aug::obref<aug_blob> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->getsize_(this_.get());
    }

    template <typename T>
    class blob_base {
        blob<T> blob_;
        int refs_;
    protected:
        ~blob_base()
        {
            /* Always deleted via derived, so no need to be virtual. */
        }
        blob_base()
            : refs_(1)
        {
            this->blob_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_blob>(id))
                return aug::object_retain<aug_object>(this->blob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete static_cast<T*>(this);
        }
        static aug::smartob<aug_blob>
        attach(T* ptr)
        {
            return aug::object_attach<aug_blob>(ptr->blob_);
        }
    };

    template <typename T>
    class scoped_blob_base {
        blob<T> blob_;
    protected:
        ~scoped_blob_base()
        {
        }
        scoped_blob_base()
        {
            this->blob_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_blob>(id))
                return aug::object_retain<aug_object>(this->blob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->blob_).get();
        }
        aug_blob*
        get() AUG_NOTHROW
        {
            return this->blob_.get();
        }
        operator aug::obref<aug_blob>() AUG_NOTHROW
        {
            return this->blob_;
        }
    };

    template <typename T>
    class blob_wrapper {
        blob<blob_wrapper<T> > blob_;
        T impl_;
        int refs_;
        explicit
        blob_wrapper(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->blob_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_blob>(id))
                return aug::object_retain<aug_object>(this->blob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        const void*
        getblobdata_(size_t* size) AUG_NOTHROW
        {
            return this->impl_.getblobdata_(size);
        }
        size_t
        getblobsize_() AUG_NOTHROW
        {
            return this->impl_.getblobsize_();
        }
        static aug::smartob<aug_blob>
        create(const T& impl = T())
        {
            blob_wrapper* ptr(new blob_wrapper(impl));
            return aug::object_attach<aug_blob>(ptr->blob_);
        }
    };

    template <typename T>
    class scoped_blob_wrapper {
        blob<scoped_blob_wrapper<T> > blob_;
        T impl_;
    public:
        explicit
        scoped_blob_wrapper(const T& impl = T())
            : impl_(impl)
        {
            this->blob_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_blob>(id))
                return aug::object_retain<aug_object>(this->blob_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        const void*
        getblobdata_(size_t* size) AUG_NOTHROW
        {
            return this->impl_.getblobdata_(size);
        }
        size_t
        getblobsize_() AUG_NOTHROW
        {
            return this->impl_.getblobsize_();
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->blob_).get();
        }
        aug_blob*
        get() AUG_NOTHROW
        {
            return this->blob_.get();
        }
        operator aug::obref<aug_blob>() AUG_NOTHROW
        {
            return this->blob_;
        }
    };

    typedef aug::smartob<aug_blob> blobptr;
}
#endif /* __cplusplus */

#endif /* AUGEXT_BLOB_H */
