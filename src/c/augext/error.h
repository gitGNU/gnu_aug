/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Wed Jun 04 08:22:59 GMT Daylight Time 2008 */

#ifndef AUGEXT_ERROR_H
#define AUGEXT_ERROR_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/* Includes. */


/* Interface declarations. */

AUG_INTERFACE(aug_error);

/* Interface definitions. */

/**
 * @defgroup aug_error aug_error
 *
 * @ingroup Object
 *
 * @{
 */

/**
 * Detailed error information.
 */

struct aug_errorvtbl {
    AUG_VTBL(aug_error);
    int (*getnum_)(aug_error*);
    char* (*getdesc_)(aug_error*, char*, size_t);
};

/**
 * Last error number.
 * @param this_ The object.
 * @return Error number.
 */

#define aug_geterrornum(this_) \
    (this_)->vtbl_->getnum_(this_)

/**
 * Last error description.
 * @param this_ The object.
 * @param dst Output buffer.
 * @param size Size of @a dst.
 * @return @a dst output buffer.
 */

#define aug_geterrordesc(this_, dst, size) \
    (this_)->vtbl_->getdesc_(this_, dst, size)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_error> {
        typedef aug_errorvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_errorid;
        }
    };
}

namespace aug {

    typedef aug::obref<aug_error> errorref;

    inline int
    geterrornum(aug::obref<aug_error> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->getnum_(this_.get());
    }

    inline char*
    geterrordesc(aug::obref<aug_error> this_, char* dst, size_t size) AUG_NOTHROW
    {
        return this_.get()->vtbl_->getdesc_(this_.get(), dst, size);
    }

    template <typename T>
    class error {

        aug_error error_;

        error(const error&);

        error&
        operator =(const error&);

        static void*
        cast_(aug_error* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_error* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_error* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static int
        getnum_(aug_error* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->geterrornum_();
        }
        static char*
        getdesc_(aug_error* this_, char* dst, size_t size) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->geterrordesc_(dst, size);
        }
        static const aug_errorvtbl*
        vtbl()
        {
            static const aug_errorvtbl local = {
                cast_,
                retain_,
                release_,
                getnum_,
                getdesc_
            };
            return &local;
        }
    public:
        explicit
        error(T* impl = 0)
        {
            this->error_.vtbl_ = this->vtbl();
            this->error_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->error_.impl_ = impl;
        }
        aug_error*
        get() AUG_NOTHROW
        {
            return &this->error_;
        }
        operator aug::obref<aug_error>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_error {
        error<basic_error<T> > error_;
        T impl_;
        int refs_;
        explicit
        basic_error(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->error_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_error>(id))
                return aug::object_retain<aug_object>(this->error_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        int
        geterrornum_() AUG_NOTHROW
        {
            return this->impl_.geterrornum_();
        }
        char*
        geterrordesc_(char* dst, size_t size) AUG_NOTHROW
        {
            return this->impl_.geterrordesc_(dst, size);
        }
        static aug::smartob<aug_error>
        create(const T& impl = T())
        {
            basic_error* ptr(new basic_error(impl));
            return aug::object_attach<aug_error>(ptr->error_);
        }
    };

    template <typename T>
    class scoped_error {
        error<scoped_error<T> > error_;
        T impl_;
    public:
        explicit
        scoped_error(const T& impl = T())
            : impl_(impl)
        {
            this->error_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_error>(id))
                return aug::object_retain<aug_object>(this->error_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        int
        geterrornum_() AUG_NOTHROW
        {
            return this->impl_.geterrornum_();
        }
        char*
        geterrordesc_(char* dst, size_t size) AUG_NOTHROW
        {
            return this->impl_.geterrordesc_(dst, size);
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->error_).get();
        }
        aug_error*
        get() AUG_NOTHROW
        {
            return this->error_.get();
        }
        operator aug::obref<aug_error>() AUG_NOTHROW
        {
            return this->error_;
        }
    };

    typedef aug::smartob<aug_error> errorptr;
}
#endif /* __cplusplus */

#endif /* AUGEXT_ERROR_H */
