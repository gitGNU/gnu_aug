/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Fri Nov 14 06:59:58 GMT Standard Time 2008 */

#ifndef AUGEXT_ITER_H
#define AUGEXT_ITER_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/* Includes. */


/* Interface declarations. */

AUG_INTERFACE(aug_iter);

/* Interface definitions. */

struct aug_var;

/**
 * @defgroup aug_iter aug_iter
 *
 * @ingroup Object
 *
 * @{
 */

struct aug_itervtbl {
    AUG_VTBL(aug_iter);
    int (*getlast_)(aug_iter*);
    int (*getnext_)(aug_iter*);
    aug_result (*getkey_)(aug_iter*, struct aug_var*);
    aug_result (*getvalue_)(aug_iter*, struct aug_var*);
};

#define aug_getiterlast(this_) \
    (this_)->vtbl_->getlast_(this_)

#define aug_getiternext(this_) \
    (this_)->vtbl_->getnext_(this_)

#define aug_getiterkey(this_, var) \
    (this_)->vtbl_->getkey_(this_, var)

#define aug_getitervalue(this_, var) \
    (this_)->vtbl_->getvalue_(this_, var)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_iter> {
        typedef aug_itervtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_iterid;
        }
    };
}

namespace aug {

    template <typename T>
    class iter {

        aug_iter iter_;

        iter(const iter&);

        iter&
        operator =(const iter&);

        static void*
        cast_(aug_iter* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_iter* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_iter* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static int
        getlast_(aug_iter* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getiterlast_();
        }
        static int
        getnext_(aug_iter* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getiternext_();
        }
        static aug_result
        getkey_(aug_iter* this_, struct aug_var* var) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getiterkey_(*var);
        }
        static aug_result
        getvalue_(aug_iter* this_, struct aug_var* var) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getitervalue_(*var);
        }
        static const aug_itervtbl*
        vtbl()
        {
            static const aug_itervtbl local = {
                cast_,
                retain_,
                release_,
                getlast_,
                getnext_,
                getkey_,
                getvalue_
            };
            return &local;
        }
    public:
        explicit
        iter(T* impl = 0)
        {
            this->iter_.vtbl_ = this->vtbl();
            this->iter_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->iter_.impl_ = impl;
        }
        aug_iter*
        get() AUG_NOTHROW
        {
            return &this->iter_;
        }
        operator aug::obref<aug_iter>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    typedef aug::obref<aug_iter> iterref;
    typedef aug::smartob<aug_iter> iterptr;
}
#endif /* __cplusplus */

/* C++ definitions. */

#if defined(__cplusplus)
namespace aug {

    inline int
    getiterlast(aug::obref<aug_iter> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->getlast_(this_.get());
    }

    inline int
    getiternext(aug::obref<aug_iter> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->getnext_(this_.get());
    }

    inline void
    getiterkey(aug::obref<aug_iter> this_, struct aug_var& var)
    {
        verify(this_.get()->vtbl_->getkey_(this_.get(), &var), this_);
    }

    inline void
    getitervalue(aug::obref<aug_iter> this_, struct aug_var& var)
    {
        verify(this_.get()->vtbl_->getvalue_(this_.get(), &var), this_);
    }

    template <typename T>
    class basic_iter {
        iter<basic_iter<T> > iter_;
        T impl_;
        int refs_;
        explicit
        basic_iter(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->iter_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_iter>(id))
                return aug::object_retain<aug_object>(this->iter_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        int
        getiterlast_() AUG_NOTHROW
        {
            return this->impl_.getiterlast_();
        }
        int
        getiternext_() AUG_NOTHROW
        {
            return this->impl_.getiternext_();
        }
        aug_result
        getiterkey_(struct aug_var& var) AUG_NOTHROW
        {
            return this->impl_.getiterkey_(var);
        }
        aug_result
        getitervalue_(struct aug_var& var) AUG_NOTHROW
        {
            return this->impl_.getitervalue_(var);
        }
        static aug::smartob<aug_iter>
        create(const T& impl = T())
        {
            basic_iter* ptr(new basic_iter(impl));
            return aug::object_attach<aug_iter>(ptr->iter_);
        }
    };

    template <typename T>
    class scoped_iter {
        iter<scoped_iter<T> > iter_;
        T impl_;
    public:
        explicit
        scoped_iter(const T& impl = T())
            : impl_(impl)
        {
            this->iter_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_iter>(id))
                return aug::object_retain<aug_object>(this->iter_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        int
        getiterlast_() AUG_NOTHROW
        {
            return this->impl_.getiterlast_();
        }
        int
        getiternext_() AUG_NOTHROW
        {
            return this->impl_.getiternext_();
        }
        aug_result
        getiterkey_(struct aug_var& var) AUG_NOTHROW
        {
            return this->impl_.getiterkey_(var);
        }
        aug_result
        getitervalue_(struct aug_var& var) AUG_NOTHROW
        {
            return this->impl_.getitervalue_(var);
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->iter_).get();
        }
        aug_iter*
        get() AUG_NOTHROW
        {
            return this->iter_.get();
        }
        operator aug::obref<aug_iter>() AUG_NOTHROW
        {
            return this->iter_;
        }
    };

    typedef aug::smartob<aug_iter> iterptr;
}
#endif /* __cplusplus */

#endif /* AUGEXT_ITER_H */
