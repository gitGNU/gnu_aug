<!--
  Copyright (c) 2004, 2005, 2006, 2007, 2008, 2009 Mark Aylett <mark.aylett@gmail.com>

  This file is part of Aug written by Mark Aylett.

  Aug is released under the GPL with the additional exemption that compiling,
  linking, and/or using OpenSSL is allowed.

  Aug is free software; you can redistribute it and/or modify it under the
  terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.

  Aug is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  You should have received a copy of the GNU General Public License along with
  this program; if not, write to the Free Software Foundation, Inc., 51
  Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-->

<package name="aug" dir="augext">

  <quotincl>augtypes.h</quotincl>

  <interface name="mar">

    <method name="compact" type="aug_result" qname="compactmar">

      Compact any unused space within message archive.

      @return See @ref TypesResult.

    </method>

    <method name="clear_BIN" type="aug_rint" qname="clearfields_BIN">

      Clear all fields within message archive.

      @return See @ref TypesResult.  The number of fields removed on success.

    </method>

    <method name="deln_BIN" type="aug_result" qname="delfieldn_BIN">

      Delete field (by ordinal) within message archive.

      @param n The ordinal position of the field.

      @return See @ref TypesResult.  #AUG_FAILNONE if there is no matching
      field.

      <param name="n" type="unsigned"/>
    </method>

    <method name="delp_BIN" type="aug_rint" qname="delfieldp_BIN">

      Delete field (by name) within message archive.

      @param name The name of the field.

      @return See @ref TypesResult.  The ordinal field position on success.
      #AUG_FAILNONE if there is no matching field.

      <param name="name" type="const char*"/>
    </method>

    <method name="getn" type="aug_rint" qname="getfieldn">

      Obtain field value (by ordinal) from message archive.

      @param n The ordinal position of the field.

      @param value The output parameter, in which, the value will be set.  Set
      to null if if there is no matching field.

      @return See @ref TypesResult.  The size of the field on success.

      <param name="n" type="unsigned"/>
      <param name="value" type="const void*&"/>
    </method>

    <method name="getp" type="aug_rint" qname="getfieldp">

      Obtain field value (by name) from message archive.

      @param name The name of the field.

      @param value The output parameter, in which, the value will be set.  Set
      to null if if there is no matching field.

      @return See @ref TypesResult.  The size of the field on success.

      <param name="name" type="const char*"/>
      <param name="value" type="const void*&"/>
    </method>

    <method name="get" type="aug_result" qname="getfield">

      Obtain field from message archive.

      @param n The ordinal position of the field.

      @param field The output parameter, in which, the field will be returned.
      The field's name and value will be set to null if if there is no
      matching field.

      @return See @ref TypesResult.

      <param name="n" type="unsigned"/>
      <param name="field" type="struct aug_field&"/>
    </method>

    <method name="putn_BIN" type="aug_result" qname="putfieldn_BIN">

      Set field value (by ordinal) within message archive.

      @param n The ordinal position of an existing field.

      @param value A pointer to the field value to be assigned.

      @param size The size of the field value to be assigned.

      @return See @ref TypesResult.  #AUG_FAILNONE if there is no matching
      field.

      <param name="n" type="unsigned"/>
      <param name="value" type="const void*"/>
      <param name="size" type="unsigned"/>
    </method>

    <method name="putp_BIN" type="aug_rint" qname="putfieldp_BIN">

      Set field value (by name) within message archive.

      @param name The name of an existing field.

      @param value A pointer to the field value to be assigned.

      @param size The size of the field value to be assigned.

      @return See @ref TypesResult.  The ordinal field position on success.
      #AUG_FAILNONE if there is no matching field.

      <param name="name" type="const char*"/>
      <param name="value" type="const void*"/>
      <param name="size" type="unsigned"/>
    </method>

    <method name="put_BIN" type="aug_rint" qname="putfield_BIN">

      Set field within message archive.

      @param field A field specifying the field name and a pointer to, and
      size of, the field value.

      @return See @ref TypesResult.  The ordinal field position on success.

      <param name="field" type="const struct aug_field&"/>
    </method>

    <method name="ntop" type="aug_result" qname="fieldntop">

      Get field name from ordinal position in message archive.

      @param n The ordinal position of the name to be returned.

      @param name The output parameter, in which, the name will be returned.

      @return See @ref TypesResult.  #AUG_FAILNONE if there is no matching
      field.

      <param name="n" type="unsigned"/>
      <param name="name" type="const char*&"/>
    </method>

    <method name="pton" type="aug_rint" qname="fieldpton">

      Get ordinal position from field name in message archive.

      @param name The name of the field.

      @return See @ref TypesResult.  The ordinal field position on success.
      #AUG_FAILNONE if there is no matching field.

      <param name="name" type="const char*"/>
    </method>

    <method name="getcount" type="unsigned" qname="getfieldcount">

      Gets the number of fields contained within message archive.

      @return The number of fields.

    </method>

    <method name="insert_BIN" type="aug_result" qname="insertmar_BIN">

      Insert file into body content of message archive.

      @param path A path to the file from which the content is read.

      @return See @ref TypesResult.

      <param name="path" type="const char*"/>
    </method>

    <method name="seek" type="aug_rsize" qname="seekmar">

      Reposition content offset within message archive.

      @param offset The offset calculated according to @a whence.

      @param whence The @ref SeekWhence directive.

      @return See @ref TypesResult.  If positive, the resulting location
      offset, in bytes, from the beginning of content.

      <param name="offset" type="off_t"/>
      <param name="whence" type="int"/>
    </method>

    <method name="setcontent_BIN" type="aug_result" qname="setcontent_BIN">

      Set content within message archive.

      @param cdata A pointer to the content to be copied.

      @param size The size of the content to be copied.

      @return See @ref TypesResult.

      <param name="cdata" type="const void*"/>
      <param name="size" type="unsigned"/>
    </method>

    <method name="sync" type="aug_result" qname="syncmar">
      Flush message archive buffers.
    </method>

    <method name="truncate_BIN" type="aug_result" qname="truncatemar_BIN">

      Truncate content within message archive.

      @param size The size to which the content will be truncated.

      @return See @ref TypesResult.

      <param name="size" type="unsigned"/>
    </method>

    <method name="write_BIN" type="aug_rsize" qname="writemar_BIN">

      Write content to message archive.

      @param buf The buffer from which the content will be copied.

      @param len The number of bytes to be written.

      @return See @ref TypesResult.  If positive, the number of bytes actually
      written.

      <param name="buf" type="const void*"/>
      <param name="len" type="unsigned"/>
    </method>

    <method name="extract_BIN" type="aug_result" qname="extractmar_BIN">

      Extract content from message archive into file.

      @param path A path to the file into which the content will be written.

      @return See @ref TypesResult.

      <param name="path" type="const char*"/>
    </method>

    <method name="read" type="aug_rsize" qname="readmar">

      Read content from message archive.

      @param buf The output buffer into which the content will be copied.

      @param len The number of bytes to be read.

      @return See @ref TypesResult.  If positive, the number of bytes actually
      read; zero if end-of-file.

      <param name="buf" type="void*"/>
      <param name="len" type="unsigned"/>
    </method>

  </interface>

  <interface name="marstore">

    <method name="del" type="aug_result" qname="delmar">
      <param name="request" type="const char*"/>
    </method>

    <method name="get" type="struct aug_mar_*" verify="true" qname="getmar">
      <param name="request" type="const char*"/>
    </method>

    <method name="put" type="aug_result" qname="putmar">
      <param name="request" type="const char*"/>
      <param name="mar" type="struct aug_mar_*"/>
    </method>

  </interface>

</package>
