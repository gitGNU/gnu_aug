/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Wed Feb 18 19:06:02 +0000 2009 */

#ifndef AUGEXT_MAR_H
#define AUGEXT_MAR_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/* Includes. */

#include "augtypes.h"

/* Interface declarations. */

AUG_INTERFACE(aug_marpool);

/* Interface definitions. */

struct aug_mar_;

/**
 * @defgroup aug_marpool aug_marpool
 *
 * @ingroup Object
 *
 * @{
 */

struct aug_marpoolvtbl {
    AUG_VTBL(aug_marpool);
    aug_result (*del_)(aug_marpool*, const char*);
    struct aug_mar_* (*get_)(aug_marpool*, const char*);
    aug_result (*put_)(aug_marpool*, const char*, struct aug_mar_*);
};

#define aug_delmar(this_, initial) \
    (this_)->vtbl_->del_(this_, initial)

#define aug_getmar(this_, initial) \
    (this_)->vtbl_->get_(this_, initial)

#define aug_putmar(this_, initial, mar) \
    (this_)->vtbl_->put_(this_, initial, mar)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_marpool> {
        typedef aug_marpoolvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_marpoolid;
        }
    };
}

namespace aug {

    template <typename T>
    class marpool {

        aug_marpool marpool_;

        marpool(const marpool&);

        marpool&
        operator =(const marpool&);

        static void*
        cast_(aug_marpool* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_marpool* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_marpool* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static aug_result
        del_(aug_marpool* this_, const char* initial) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->delmar_(initial);
        }
        static struct aug_mar_*
        get_(aug_marpool* this_, const char* initial) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getmar_(initial);
        }
        static aug_result
        put_(aug_marpool* this_, const char* initial, struct aug_mar_* mar) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->putmar_(initial, mar);
        }
        static const aug_marpoolvtbl*
        vtbl()
        {
            static const aug_marpoolvtbl local = {
                cast_,
                retain_,
                release_,
                del_,
                get_,
                put_
            };
            return &local;
        }
    public:
        explicit
        marpool(T* impl = 0)
        {
            this->marpool_.vtbl_ = this->vtbl();
            this->marpool_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->marpool_.impl_ = impl;
        }
        aug_marpool*
        get() AUG_NOTHROW
        {
            return &this->marpool_;
        }
        operator aug::obref<aug_marpool>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    typedef aug::obref<aug_marpool> marpoolref;
    typedef aug::smartob<aug_marpool> marpoolptr;
}
#endif /* __cplusplus */

/* C++ definitions. */

#if defined(__cplusplus)
namespace aug {

    inline void
    delmar(aug::obref<aug_marpool> this_, const char* initial)
    {
        verify(this_.get()->vtbl_->del_(this_.get(), initial), this_);
    }

    inline struct aug_mar_*
    getmar(aug::obref<aug_marpool> this_, const char* initial)
    {
        return verify(this_.get()->vtbl_->get_(this_.get(), initial), this_);
    }

    inline void
    putmar(aug::obref<aug_marpool> this_, const char* initial, struct aug_mar_* mar)
    {
        verify(this_.get()->vtbl_->put_(this_.get(), initial, mar), this_);
    }

    template <typename T>
    class marpool_base {
        marpool<T> marpool_;
        int refs_;
    protected:
        ~marpool_base()
        {
            /* Always deleted via derived, so no need to be virtual. */
        }
        marpool_base()
            : refs_(1)
        {
            this->marpool_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_marpool>(id))
                return aug::object_retain<aug_object>(this->marpool_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete static_cast<T*>(this);
        }
        static aug::smartob<aug_marpool>
        attach(T* ptr)
        {
            return aug::object_attach<aug_marpool>(ptr->marpool_);
        }
    };

    template <typename T>
    class scoped_marpool_base {
        marpool<T> marpool_;
    protected:
        ~scoped_marpool_base()
        {
        }
        scoped_marpool_base()
        {
            this->marpool_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_marpool>(id))
                return aug::object_retain<aug_object>(this->marpool_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->marpool_).get();
        }
        aug_marpool*
        get() AUG_NOTHROW
        {
            return this->marpool_.get();
        }
        operator aug::obref<aug_marpool>() AUG_NOTHROW
        {
            return this->marpool_;
        }
    };

    template <typename T>
    class marpool_wrapper {
        marpool<marpool_wrapper<T> > marpool_;
        T impl_;
        int refs_;
        explicit
        marpool_wrapper(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->marpool_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_marpool>(id))
                return aug::object_retain<aug_object>(this->marpool_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        aug_result
        delmar_(const char* initial) AUG_NOTHROW
        {
            return this->impl_.delmar_(initial);
        }
        struct aug_mar_*
        getmar_(const char* initial) AUG_NOTHROW
        {
            return this->impl_.getmar_(initial);
        }
        aug_result
        putmar_(const char* initial, struct aug_mar_* mar) AUG_NOTHROW
        {
            return this->impl_.putmar_(initial, mar);
        }
        static aug::smartob<aug_marpool>
        create(const T& impl = T())
        {
            marpool_wrapper* ptr(new marpool_wrapper(impl));
            return aug::object_attach<aug_marpool>(ptr->marpool_);
        }
    };

    template <typename T>
    class scoped_marpool_wrapper {
        marpool<scoped_marpool_wrapper<T> > marpool_;
        T impl_;
    public:
        explicit
        scoped_marpool_wrapper(const T& impl = T())
            : impl_(impl)
        {
            this->marpool_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_marpool>(id))
                return aug::object_retain<aug_object>(this->marpool_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_result
        delmar_(const char* initial) AUG_NOTHROW
        {
            return this->impl_.delmar_(initial);
        }
        struct aug_mar_*
        getmar_(const char* initial) AUG_NOTHROW
        {
            return this->impl_.getmar_(initial);
        }
        aug_result
        putmar_(const char* initial, struct aug_mar_* mar) AUG_NOTHROW
        {
            return this->impl_.putmar_(initial, mar);
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->marpool_).get();
        }
        aug_marpool*
        get() AUG_NOTHROW
        {
            return this->marpool_.get();
        }
        operator aug::obref<aug_marpool>() AUG_NOTHROW
        {
            return this->marpool_;
        }
    };

    typedef aug::smartob<aug_marpool> marpoolptr;
}
#endif /* __cplusplus */

#endif /* AUGEXT_MAR_H */
