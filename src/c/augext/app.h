/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Tue Nov 18 18:55:04 GMT Standard Time 2008 */

#ifndef AUGEXT_APP_H
#define AUGEXT_APP_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/* Includes. */

#include "augtypes.h"

/* Interface declarations. */

AUG_INTERFACE(aug_app);

/* Interface definitions. */

/**
 * @defgroup aug_app aug_app
 *
 * @ingroup Object
 *
 * @{
 */

/**
 * Service callbacks.
 * Called by the framework in the following order:
 * @li readconf
 * @li init
 * @li run
 * @li term
 */

struct aug_appvtbl {
    AUG_VTBL(aug_app);
    const char* (*getopt_)(aug_app*, int);
    aug_result (*readconf_)(aug_app*, const char*, aug_bool, aug_bool);
    aug_result (*init_)(aug_app*);
    aug_result (*run_)(aug_app*);
    void (*term_)(aug_app*);
};

#define aug_getappopt(this_, opt) \
    (this_)->vtbl_->getopt_(this_, opt)

#define aug_readappconf(this_, conffile, batch, daemon) \
    (this_)->vtbl_->readconf_(this_, conffile, batch, daemon)

#define aug_initapp(this_) \
    (this_)->vtbl_->init_(this_)

#define aug_runapp(this_) \
    (this_)->vtbl_->run_(this_)

#define aug_termapp(this_) \
    (this_)->vtbl_->term_(this_)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_app> {
        typedef aug_appvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_appid;
        }
    };
}

namespace aug {

    template <typename T>
    class app {

        aug_app app_;

        app(const app&);

        app&
        operator =(const app&);

        static void*
        cast_(aug_app* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_app* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_app* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static const char*
        getopt_(aug_app* this_, int opt) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getappopt_(opt);
        }
        static aug_result
        readconf_(aug_app* this_, const char* conffile, aug_bool batch, aug_bool daemon) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->readappconf_(conffile, batch, daemon);
        }
        static aug_result
        init_(aug_app* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->initapp_();
        }
        static aug_result
        run_(aug_app* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->runapp_();
        }
        static void
        term_(aug_app* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->termapp_();
        }
        static const aug_appvtbl*
        vtbl()
        {
            static const aug_appvtbl local = {
                cast_,
                retain_,
                release_,
                getopt_,
                readconf_,
                init_,
                run_,
                term_
            };
            return &local;
        }
    public:
        explicit
        app(T* impl = 0)
        {
            this->app_.vtbl_ = this->vtbl();
            this->app_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->app_.impl_ = impl;
        }
        aug_app*
        get() AUG_NOTHROW
        {
            return &this->app_;
        }
        operator aug::obref<aug_app>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    typedef aug::obref<aug_app> appref;
    typedef aug::smartob<aug_app> appptr;
}
#endif /* __cplusplus */

/* C++ definitions. */

#if defined(__cplusplus)
namespace aug {

    inline const char*
    getappopt(aug::obref<aug_app> this_, int opt) AUG_NOTHROW
    {
        return this_.get()->vtbl_->getopt_(this_.get(), opt);
    }

    inline void
    readappconf(aug::obref<aug_app> this_, const char* conffile, aug_bool batch, aug_bool daemon)
    {
        verify(this_.get()->vtbl_->readconf_(this_.get(), conffile, batch, daemon), this_);
    }

    inline void
    initapp(aug::obref<aug_app> this_)
    {
        verify(this_.get()->vtbl_->init_(this_.get()), this_);
    }

    inline void
    runapp(aug::obref<aug_app> this_)
    {
        verify(this_.get()->vtbl_->run_(this_.get()), this_);
    }

    inline void
    termapp(aug::obref<aug_app> this_) AUG_NOTHROW
    {
        this_.get()->vtbl_->term_(this_.get());
    }

    template <typename T>
    class app_base {
        app<T> app_;
        int refs_;
    protected:
        ~app_base()
        {
            /* Always deleted via derived, so no need to be virtual. */
        }
        app_base()
            : refs_(1)
        {
            this->app_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_app>(id))
                return aug::object_retain<aug_object>(this->app_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete static_cast<T*>(this);
        }
        static aug::smartob<aug_app>
        attach(T* ptr)
        {
            return aug::object_attach<aug_app>(ptr->app_);
        }
    };

    template <typename T>
    class scoped_app_base {
        app<T> app_;
    protected:
        ~scoped_app_base()
        {
        }
        scoped_app_base()
        {
            this->app_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_app>(id))
                return aug::object_retain<aug_object>(this->app_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->app_).get();
        }
        aug_app*
        get() AUG_NOTHROW
        {
            return this->app_.get();
        }
        operator aug::obref<aug_app>() AUG_NOTHROW
        {
            return this->app_;
        }
    };

    template <typename T>
    class app_wrapper {
        app<app_wrapper<T> > app_;
        T impl_;
        int refs_;
        explicit
        app_wrapper(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->app_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_app>(id))
                return aug::object_retain<aug_object>(this->app_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        const char*
        getappopt_(int opt) AUG_NOTHROW
        {
            return this->impl_.getappopt_(opt);
        }
        aug_result
        readappconf_(const char* conffile, aug_bool batch, aug_bool daemon) AUG_NOTHROW
        {
            return this->impl_.readappconf_(conffile, batch, daemon);
        }
        aug_result
        initapp_() AUG_NOTHROW
        {
            return this->impl_.initapp_();
        }
        aug_result
        runapp_() AUG_NOTHROW
        {
            return this->impl_.runapp_();
        }
        void
        termapp_() AUG_NOTHROW
        {
            this->impl_.termapp_();
        }
        static aug::smartob<aug_app>
        create(const T& impl = T())
        {
            app_wrapper* ptr(new app_wrapper(impl));
            return aug::object_attach<aug_app>(ptr->app_);
        }
    };

    template <typename T>
    class scoped_app_wrapper {
        app<scoped_app_wrapper<T> > app_;
        T impl_;
    public:
        explicit
        scoped_app_wrapper(const T& impl = T())
            : impl_(impl)
        {
            this->app_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_app>(id))
                return aug::object_retain<aug_object>(this->app_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        const char*
        getappopt_(int opt) AUG_NOTHROW
        {
            return this->impl_.getappopt_(opt);
        }
        aug_result
        readappconf_(const char* conffile, aug_bool batch, aug_bool daemon) AUG_NOTHROW
        {
            return this->impl_.readappconf_(conffile, batch, daemon);
        }
        aug_result
        initapp_() AUG_NOTHROW
        {
            return this->impl_.initapp_();
        }
        aug_result
        runapp_() AUG_NOTHROW
        {
            return this->impl_.runapp_();
        }
        void
        termapp_() AUG_NOTHROW
        {
            this->impl_.termapp_();
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->app_).get();
        }
        aug_app*
        get() AUG_NOTHROW
        {
            return this->app_.get();
        }
        operator aug::obref<aug_app>() AUG_NOTHROW
        {
            return this->app_;
        }
    };

    typedef aug::smartob<aug_app> appptr;
}
#endif /* __cplusplus */

#endif /* AUGEXT_APP_H */
