/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Fri May 30 18:58:43 GMT Daylight Time 2008 */

#ifndef AUGEXT_PTRBOX_H
#define AUGEXT_PTRBOX_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/**
 * @defgroup aug_ptrbox aug_ptrbox
 *
 * @ingroup Object
 *
 * @{
 */

AUG_INTERFACE(aug_ptrbox);

struct aug_ptrboxvtbl {
    AUG_VTBL(aug_ptrbox);
    void* (*getptr_)(aug_ptrbox*);
};

#define aug_getptr(this_) \
    (this_)->vtbl_->getptr_(this_)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_ptrbox> {
        typedef aug_ptrboxvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_ptrboxid;
        }
    };
}

namespace aug {

    typedef aug::obref<aug_ptrbox> ptrboxref;

    inline void*
    getptr(aug::obref<aug_ptrbox> this_) AUG_NOTHROW
    {
        return this_.get()->vtbl_->getptr_(this_.get());
    }

    template <typename T>
    class ptrbox {

        aug_ptrbox ptrbox_;

        ptrbox(const ptrbox&);

        ptrbox&
        operator =(const ptrbox&);

        static void*
        cast_(aug_ptrbox* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_ptrbox* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_ptrbox* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static void*
        getptr_(aug_ptrbox* this_) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->getptr_();
        }
        static const aug_ptrboxvtbl*
        vtbl()
        {
            static const aug_ptrboxvtbl local = {
                cast_,
                retain_,
                release_,
                getptr_
            };
            return &local;
        }
    public:
        explicit
        ptrbox(T* impl = 0)
        {
            this->ptrbox_.vtbl_ = this->vtbl();
            this->ptrbox_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->ptrbox_.impl_ = impl;
        }
        aug_ptrbox*
        get() AUG_NOTHROW
        {
            return &this->ptrbox_;
        }
        operator aug::obref<aug_ptrbox>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    template <typename T>
    class basic_ptrbox {
        ptrbox<basic_ptrbox<T> > ptrbox_;
        T impl_;
        int refs_;
        explicit
        basic_ptrbox(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->ptrbox_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_ptrbox>(id))
                return aug::object_retain<aug_object>(this->ptrbox_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        void*
        getptr_() AUG_NOTHROW
        {
            return this->impl_.getptr_();
        }
        static aug::smartob<aug_ptrbox>
        create(const T& impl = T())
        {
            basic_ptrbox* ptr(new basic_ptrbox(impl));
            return aug::object_attach<aug_ptrbox>(ptr->ptrbox_);
        }
    };

    template <typename T>
    class scoped_ptrbox {
        ptrbox<scoped_ptrbox<T> > ptrbox_;
        T impl_;
    public:
        explicit
        scoped_ptrbox(const T& impl = T())
            : impl_(impl)
        {
            this->ptrbox_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_ptrbox>(id))
                return aug::object_retain<aug_object>(this->ptrbox_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        void*
        getptr_() AUG_NOTHROW
        {
            return this->impl_.getptr_();
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->ptrbox_).get();
        }
        aug_ptrbox*
        get() AUG_NOTHROW
        {
            return this->ptrbox_.get();
        }
        operator aug::obref<aug_ptrbox>() AUG_NOTHROW
        {
            return this->ptrbox_;
        }
    };

    typedef aug::smartob<aug_ptrbox> ptrboxptr;
}
#endif /* __cplusplus */

#endif /* AUGEXT_PTRBOX_H */
