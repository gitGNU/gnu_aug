/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Thu Feb 25 09:28:50 +0000 2010 */

#ifndef AUGEXT_HTTP_H
#define AUGEXT_HTTP_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/* Includes. */

#include "augtypes.h"

/* Interface declarations. */

AUG_INTERFACE(aug_httphandler);

/* Interface definitions. */

/**
 * @defgroup aug_httphandler aug_httphandler
 *
 * @ingroup Object
 *
 * @{
 */

struct aug_httphandlervtbl {
    AUG_VTBL(aug_httphandler);
    aug_result (*request_)(aug_httphandler*, const char*);
    aug_result (*field_)(aug_httphandler*, const char*, const char*);
    aug_result (*csize_)(aug_httphandler*, unsigned);
    aug_result (*cdata_)(aug_httphandler*, const void*, unsigned);
    aug_result (*end_)(aug_httphandler*, aug_bool);
};

#define aug_httprequest(this_, value) \
    (this_)->vtbl_->request_(this_, value)

#define aug_httpfield(this_, name, value) \
    (this_)->vtbl_->field_(this_, name, value)

#define aug_httpcsize(this_, size) \
    (this_)->vtbl_->csize_(this_, size)

#define aug_httpcdata(this_, buf, len) \
    (this_)->vtbl_->cdata_(this_, buf, len)

#define aug_httpend(this_, commit) \
    (this_)->vtbl_->end_(this_, commit)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_httphandler> {
        typedef aug_httphandlervtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_httphandlerid;
        }
    };
}

namespace aug {

    template <typename T>
    class httphandler {

        aug_httphandler httphandler_;

        httphandler(const httphandler&);

        httphandler&
        operator =(const httphandler&);

        static void*
        cast_(aug_httphandler* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_httphandler* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_httphandler* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static aug_result
        request_(aug_httphandler* this_, const char* value) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->httprequest_(value);
        }
        static aug_result
        field_(aug_httphandler* this_, const char* name, const char* value) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->httpfield_(name, value);
        }
        static aug_result
        csize_(aug_httphandler* this_, unsigned size) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->httpcsize_(size);
        }
        static aug_result
        cdata_(aug_httphandler* this_, const void* buf, unsigned len) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->httpcdata_(buf, len);
        }
        static aug_result
        end_(aug_httphandler* this_, aug_bool commit) AUG_NOTHROW
        {
            return static_cast<T*>(this_->impl_)->httpend_(commit);
        }
        static const aug_httphandlervtbl*
        vtbl()
        {
            static const aug_httphandlervtbl local = {
                cast_,
                retain_,
                release_,
                request_,
                field_,
                csize_,
                cdata_,
                end_
            };
            return &local;
        }
    public:
        explicit
        httphandler(T* impl = 0)
        {
            this->httphandler_.vtbl_ = this->vtbl();
            this->httphandler_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->httphandler_.impl_ = impl;
        }
        aug_httphandler*
        get() AUG_NOTHROW
        {
            return &this->httphandler_;
        }
        operator aug::obref<aug_httphandler>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    typedef aug::obref<aug_httphandler> httphandlerref;
    typedef aug::smartob<aug_httphandler> httphandlerptr;
}
#endif /* __cplusplus */

/* C++ definitions. */

#if defined(__cplusplus)
namespace aug {

    inline aug_result
    httprequest(aug::obref<aug_httphandler> this_, const char* value)
    {
        return verify(this_.get()->vtbl_->request_(this_.get(), value));
    }

    inline aug_result
    httpfield(aug::obref<aug_httphandler> this_, const char* name, const char* value)
    {
        return verify(this_.get()->vtbl_->field_(this_.get(), name, value));
    }

    inline aug_result
    httpcsize(aug::obref<aug_httphandler> this_, unsigned size)
    {
        return verify(this_.get()->vtbl_->csize_(this_.get(), size));
    }

    inline aug_result
    httpcdata(aug::obref<aug_httphandler> this_, const void* buf, unsigned len)
    {
        return verify(this_.get()->vtbl_->cdata_(this_.get(), buf, len));
    }

    inline aug_result
    httpend(aug::obref<aug_httphandler> this_, aug_bool commit)
    {
        return verify(this_.get()->vtbl_->end_(this_.get(), commit));
    }

    template <typename T>
    class httphandler_base {
        httphandler<T> httphandler_;
        int refs_;
    protected:
        ~httphandler_base()
        {
            /* Always deleted via derived, so no need to be virtual. */
        }
        httphandler_base()
            : refs_(1)
        {
            this->httphandler_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_httphandler>(id))
                return aug::object_retain<aug_object>(this->httphandler_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete static_cast<T*>(this);
        }
        static aug::smartob<aug_httphandler>
        attach(T* ptr)
        {
            return aug::object_attach<aug_httphandler>(ptr->httphandler_);
        }
    };

    template <typename T>
    class scoped_httphandler_base {
        httphandler<T> httphandler_;
    protected:
        ~scoped_httphandler_base()
        {
        }
        scoped_httphandler_base()
        {
            this->httphandler_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_httphandler>(id))
                return aug::object_retain<aug_object>(this->httphandler_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->httphandler_).get();
        }
        aug_httphandler*
        get() AUG_NOTHROW
        {
            return this->httphandler_.get();
        }
        operator aug::obref<aug_httphandler>() AUG_NOTHROW
        {
            return this->httphandler_;
        }
    };

    template <typename T>
    class httphandler_wrapper {
        httphandler<httphandler_wrapper<T> > httphandler_;
        T impl_;
        int refs_;
        explicit
        httphandler_wrapper(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->httphandler_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_httphandler>(id))
                return aug::object_retain<aug_object>(this->httphandler_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        aug_result
        httprequest_(const char* value) AUG_NOTHROW
        {
            return this->impl_.httprequest_(value);
        }
        aug_result
        httpfield_(const char* name, const char* value) AUG_NOTHROW
        {
            return this->impl_.httpfield_(name, value);
        }
        aug_result
        httpcsize_(unsigned size) AUG_NOTHROW
        {
            return this->impl_.httpcsize_(size);
        }
        aug_result
        httpcdata_(const void* buf, unsigned len) AUG_NOTHROW
        {
            return this->impl_.httpcdata_(buf, len);
        }
        aug_result
        httpend_(aug_bool commit) AUG_NOTHROW
        {
            return this->impl_.httpend_(commit);
        }
        static aug::smartob<aug_httphandler>
        create(const T& impl = T())
        {
            httphandler_wrapper* ptr(new httphandler_wrapper(impl));
            return aug::object_attach<aug_httphandler>(ptr->httphandler_);
        }
    };

    template <typename T>
    class scoped_httphandler_wrapper {
        httphandler<scoped_httphandler_wrapper<T> > httphandler_;
        T impl_;
    public:
        explicit
        scoped_httphandler_wrapper(const T& impl = T())
            : impl_(impl)
        {
            this->httphandler_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_httphandler>(id))
                return aug::object_retain<aug_object>(this->httphandler_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_result
        httprequest_(const char* value) AUG_NOTHROW
        {
            return this->impl_.httprequest_(value);
        }
        aug_result
        httpfield_(const char* name, const char* value) AUG_NOTHROW
        {
            return this->impl_.httpfield_(name, value);
        }
        aug_result
        httpcsize_(unsigned size) AUG_NOTHROW
        {
            return this->impl_.httpcsize_(size);
        }
        aug_result
        httpcdata_(const void* buf, unsigned len) AUG_NOTHROW
        {
            return this->impl_.httpcdata_(buf, len);
        }
        aug_result
        httpend_(aug_bool commit) AUG_NOTHROW
        {
            return this->impl_.httpend_(commit);
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->httphandler_).get();
        }
        aug_httphandler*
        get() AUG_NOTHROW
        {
            return this->httphandler_.get();
        }
        operator aug::obref<aug_httphandler>() AUG_NOTHROW
        {
            return this->httphandler_;
        }
    };

    typedef aug::smartob<aug_httphandler> httphandlerptr;
}
#endif /* __cplusplus */

#endif /* AUGEXT_HTTP_H */
