/* -*- c++ -*- */
/* Automatically generated by augidl */
/* at Wed Feb 18 19:05:59 +0000 2009 */

#ifndef AUGEXT_ERR_H
#define AUGEXT_ERR_H

#include "augabi.h"

#if defined(__cplusplus)

#include "augabipp.hpp"

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */

/* Includes. */


/* Interface declarations. */

AUG_INTERFACE(aug_err);

/* Interface definitions. */

/**
 * @defgroup aug_err aug_err
 *
 * @ingroup Object
 *
 * @{
 */

/**
 * Detailed error information.
 */

struct aug_errvtbl {
    AUG_VTBL(aug_err);
    void (*copyerrinfo_)(aug_err*, struct aug_errinfo*);
};

/**
 * Last error description.
 * @param this_ The object.
 * @param dst Output buffer.
 */

#define aug_copyerrinfo(this_, dst) \
    (this_)->vtbl_->copyerrinfo_(this_, dst)

/** @} */

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<aug_err> {
        typedef aug_errvtbl vtbl;
        static const char*
        id() AUG_NOTHROW
        {
            return aug_errid;
        }
    };
}

namespace aug {

    template <typename T>
    class err {

        aug_err err_;

        err(const err&);

        err&
        operator =(const err&);

        static void*
        cast_(aug_err* this_, const char* id) AUG_NOTHROW
        {
            return aug::retget(static_cast<T*>(this_->impl_)->cast_(id));
        }
        static void
        retain_(aug_err* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->retain_();
        }
        static void
        release_(aug_err* this_) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->release_();
        }
        static void
        copyerrinfo_(aug_err* this_, struct aug_errinfo* dst) AUG_NOTHROW
        {
            static_cast<T*>(this_->impl_)->copyerrinfo_(*dst);
        }
        static const aug_errvtbl*
        vtbl()
        {
            static const aug_errvtbl local = {
                cast_,
                retain_,
                release_,
                copyerrinfo_
            };
            return &local;
        }
    public:
        explicit
        err(T* impl = 0)
        {
            this->err_.vtbl_ = this->vtbl();
            this->err_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            this->err_.impl_ = impl;
        }
        aug_err*
        get() AUG_NOTHROW
        {
            return &this->err_;
        }
        operator aug::obref<aug_err>() AUG_NOTHROW
        {
            return this->get();
        }
    };

    typedef aug::obref<aug_err> errref;
    typedef aug::smartob<aug_err> errptr;
}
#endif /* __cplusplus */

/* C++ definitions. */

#if defined(__cplusplus)
namespace aug {

    inline void
    copyerrinfo(aug::obref<aug_err> this_, struct aug_errinfo& dst) AUG_NOTHROW
    {
        this_.get()->vtbl_->copyerrinfo_(this_.get(), &dst);
    }

    template <typename T>
    class err_base {
        err<T> err_;
        int refs_;
    protected:
        ~err_base()
        {
            /* Always deleted via derived, so no need to be virtual. */
        }
        err_base()
            : refs_(1)
        {
            this->err_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_err>(id))
                return aug::object_retain<aug_object>(this->err_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete static_cast<T*>(this);
        }
        static aug::smartob<aug_err>
        attach(T* ptr)
        {
            return aug::object_attach<aug_err>(ptr->err_);
        }
    };

    template <typename T>
    class scoped_err_base {
        err<T> err_;
    protected:
        ~scoped_err_base()
        {
        }
        scoped_err_base()
        {
            this->err_.reset(static_cast<T*>(this));
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_err>(id))
                return aug::object_retain<aug_object>(this->err_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->err_).get();
        }
        aug_err*
        get() AUG_NOTHROW
        {
            return this->err_.get();
        }
        operator aug::obref<aug_err>() AUG_NOTHROW
        {
            return this->err_;
        }
    };

    template <typename T>
    class err_wrapper {
        err<err_wrapper<T> > err_;
        T impl_;
        int refs_;
        explicit
        err_wrapper(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            this->err_.reset(this);
        }
    public:
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_err>(id))
                return aug::object_retain<aug_object>(this->err_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            ++this->refs_;
        }
        void
        release_() AUG_NOTHROW
        {
            assert(0 < this->refs_);
            if (0 == --this->refs_)
                delete this;
        }
        void
        copyerrinfo_(struct aug_errinfo& dst) AUG_NOTHROW
        {
            this->impl_.copyerrinfo_(dst);
        }
        static aug::smartob<aug_err>
        create(const T& impl = T())
        {
            err_wrapper* ptr(new err_wrapper(impl));
            return aug::object_attach<aug_err>(ptr->err_);
        }
    };

    template <typename T>
    class scoped_err_wrapper {
        err<scoped_err_wrapper<T> > err_;
        T impl_;
    public:
        explicit
        scoped_err_wrapper(const T& impl = T())
            : impl_(impl)
        {
            this->err_.reset(this);
        }
        aug::smartob<aug_object>
        cast_(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<aug_err>(id))
                return aug::object_retain<aug_object>(this->err_);
            return null;
        }
        void
        retain_() AUG_NOTHROW
        {
        }
        void
        release_() AUG_NOTHROW
        {
        }
        void
        copyerrinfo_(struct aug_errinfo& dst) AUG_NOTHROW
        {
            this->impl_.copyerrinfo_(dst);
        }
        aug_object*
        base() AUG_NOTHROW
        {
            return aug::obref<aug_object>(this->err_).get();
        }
        aug_err*
        get() AUG_NOTHROW
        {
            return this->err_.get();
        }
        operator aug::obref<aug_err>() AUG_NOTHROW
        {
            return this->err_;
        }
    };

    typedef aug::smartob<aug_err> errptr;
}
#endif /* __cplusplus */

#endif /* AUGEXT_ERR_H */
