#!/usr/bin/env ruby
require 'optparse'
require 'rexml/document'

# TODO:
# help attribute.
# getter/setter element.
# object attribute.

include REXML

STDOUT.binmode

class Param
    attr_reader :name, :type
    def initialize(name, type)
        @name = name
        @type = type
    end
end

class Method_
    attr_reader :name, :type
    def initialize(name, type, qname = nil)
        @name = name
        @type = type
        @qname = qname
        @params = []
    end
    def each_param(&action)
        @params.each &action
    end
    def push_param(param)
        @params << param
    end
    def qname(iface)
        if @qname.nil? then
            @name + iface
        else
            @qname
        end
    end
end

class Interface
    attr_reader :pkg, :name
    def initialize(pkg, name)
        @pkg = pkg
        @name = name
        @methods = []
    end
    def each_method(&action)
        @methods.each &action
    end
    def push_method(method)
        @methods << method
    end
    def cname
        "#{@pkg}_#{@name}"
    end
end

def getreturn(method)
    method.type == "void" ? "" : "return "
end

def getarglist(iface, method)
    ls = ["#{iface.cname}* obj"]
    method.each_param {|param| ls << "#{param.type} #{param.name}"}
    ls.join(", ")
end

def getarglistref(iface, method)
    ls = ["#{iface.name}ref ref"]
    method.each_param {|param| ls << "#{param.type} #{param.name}"}
    ls.join(", ")
end

def getarglistpp(iface, method)
    ls = []
    method.each_param {|param| ls << "#{param.type} #{param.name}"}
    ls.join(", ")
end

def getnamelist(method)
    ls = ["obj"]
    method.each_param {|param| ls << param.name}
    ls.join(", ")
end

def getnamelistref(method)
    ls = ["ref"]
    method.each_param {|param| ls << param.name}
    ls.join(", ")
end

def getnamelistpp(method)
    ls = []
    method.each_param {|param| ls << param.name}
    ls.join(", ")
end

def gettypelist(iface, method)
    ls = ["#{iface.cname}*"]
    method.each_param {|param| ls << param.type}
    ls.join(", ")
end

def getmethodlist(iface)
    ls = []
    iface.each_method {|method| ls << "#{' ' * 16}#{method.name}_"}
    ",\n" + ls.join(",\n")
end

def getparam(node)
    name = node.attributes["name"].to_s
    type = node.attributes["type"].to_s
    Param.new(name, type)
end

def getmethod(node)
    name = node.attributes["name"].to_s
    type = node.attributes["type"].to_s
    qname = nil
    if node.attributes.has_key? "qname" then
        qname = node.attributes["qname"].to_s
    end
    method = Method_.new(name, type, qname)
    node.elements.each do |child|
        if child.name == "param" then
            param = getparam(child)
            method.push_param(param)
        else
            raise "unknown element '#{x.name}'"
        end
    end
    method
end

def getinterface(pkg, node)
    name = node.attributes["name"].to_s
    interface = Interface.new(pkg, name)
    node.elements.each do |child|
        if child.name == "method" then
            method = getmethod(child)
            interface.push_method(method)
        else
            raise "unknown element '#{x.name}'"
        end
    end
    interface
end

def putcmethod(iface, method)
    typelist = gettypelist(iface, method)
    puts "    #{method.type} (*#{method.name}_)(#{typelist});"
end

def putcdefine(iface, method)
    namelist = getnamelist(method)
    puts <<END

#define #{iface.pkg}_#{method.qname(iface.name)}(#{namelist}) \\
    ((#{iface.cname}*)obj)->vtbl_->#{method.name}_(#{namelist})
END
end

def putinline(iface, method)
    arglist = getarglistref(iface, method)
    namelist = getnamelist(method)
    puts <<END

    inline #{method.type}
    #{method.qname(iface.name)}(#{arglist}) AUG_NOTHROW
    {
        #{iface.cname}* obj(ref.get());
        #{getreturn method}obj->vtbl_->#{method.name}_(#{namelist});
    }
END
end

def putstatic(iface, method)
    arglist = getarglist(iface, method)
    namelist = getnamelistpp(method)
    puts <<END
        static #{method.type}
        #{method.name}_(#{arglist}) AUG_NOTHROW
        {
            T* impl = static_cast<T*>(obj->impl_);
            #{getreturn method}impl->#{method.qname(iface.name)}(#{namelist});
        }
END
end

def putforward(iface, method)
    arglist = getarglistpp(iface, method)
    namelist = getnamelistpp(method)
    qname = method.qname(iface.name)
    puts <<END
        #{method.type}
        #{qname}(#{arglist}) AUG_NOTHROW
        {
            #{getreturn method}impl_.#{qname}(#{namelist});
        }
END
end

def putinterface(iface)
    puts <<END

AUG_OBJECTDECL(#{iface.cname});
struct #{iface.cname}vtbl {
    AUG_OBJECT(#{iface.cname});
END

    iface.each_method {|x| putcmethod iface, x}
    puts "};"
    iface.each_method {|x| putcdefine iface, x}

    puts <<END

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<#{iface.cname}> {
        typedef #{iface.cname}vtbl vtbl;
        static const char*
        id()
        {
            return #{iface.cname}id;
        }
    };
}

namespace #{iface.pkg} {

    typedef aug::obref<#{iface.cname}> #{iface.name}ref;
END
    iface.each_method {|x| putinline iface, x}
    puts <<END

    template <typename T>
    class #{iface.name} {

        #{iface.cname} #{iface.name}_;

        #{iface.name}(const #{iface.name}&);

        #{iface.name}&
        operator =(const #{iface.name}&);

        static void*
        cast_(#{iface.cname}* obj, const char* id) AUG_NOTHROW
        {
            T* impl = static_cast<T*>(obj->impl_);
            return impl->cast(id).get();
        }
        static int
        incref_(#{iface.cname}* obj) AUG_NOTHROW
        {
            T* impl = static_cast<T*>(obj->impl_);
            return impl->incref();
        }
        static int
        decref_(#{iface.cname}* obj) AUG_NOTHROW
        {
            T* impl = static_cast<T*>(obj->impl_);
            return impl->decref();
        }
END
    iface.each_method {|x| putstatic iface, x}
    puts <<END
        static const #{iface.cname}vtbl*
        vtbl()
        {
            static const #{iface.cname}vtbl local = {
                cast_,
                incref_,
                decref_#{getmethodlist(iface)}
            };
            return &local;
        }
    public:
        explicit
        #{iface.name}(T* impl = 0)
        {
            #{iface.name}_.vtbl_ = vtbl();
            #{iface.name}_.impl_ = impl;
        }
        void
        reset(T* impl)
        {
            #{iface.name}_.impl_ = impl;
        }
        #{iface.cname}*
        get()
        {
            return &#{iface.name}_;
        }
        operator #{iface.name}ref()
        {
            return get();
        }
    };

    template <typename T>
    class basic_#{iface.name} {
        #{iface.name}<basic_#{iface.name}<T> > #{iface.name}_;
        T impl_;
        unsigned refs_;
        explicit
        basic_#{iface.name}(const T& impl)
            : impl_(impl),
              refs_(1)
        {
            #{iface.name}_.reset(this);
        }
    public:
        objectref
        cast(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<#{iface.cname}>(id))
                return #{iface.name}_;
            return null;
        }
        int
        incref() AUG_NOTHROW
        {
            ++refs_;
            return 0;
        }
        int
        decref() AUG_NOTHROW
        {
            if (0 == --refs_)
                delete this;
            return 0;
        }
END
    iface.each_method {|x| putforward iface, x}
    puts <<END
        static aug::smartob<#{iface.cname}>
        create(const T& impl = T())
        {
            basic_#{iface.name}* ptr(new basic_#{iface.name}(impl));
            return aug::object_attach<#{iface.cname}>(ptr->#{iface.name}_);
        }
    };

    template <typename T>
    class scoped_#{iface.name} {
        #{iface.name}<scoped_#{iface.name}<T> > #{iface.name}_;
        T impl_;
    public:
        explicit
        scoped_#{iface.name}(const T& impl = T())
            : impl_(impl)
        {
            #{iface.name}_.reset(this);
        }
        objectref
        cast(const char* id) AUG_NOTHROW
        {
            if (aug::equalid<aug_object>(id) || aug::equalid<#{iface.cname}>(id))
                return #{iface.name}_;
            return null;
        }
        int
        incref() AUG_NOTHROW
        {
            return 0;
        }
        int
        decref() AUG_NOTHROW
        {
            return 0;
        }
END
    iface.each_method {|x| putforward iface, x}
    puts <<END
        #{iface.cname}*
        get()
        {
            return #{iface.name}_.get();
        }
        operator #{iface.name}ref()
        {
            return #{iface.name}_;
        }
    };
}
#endif /* __cplusplus */
END
end

def putpackage(file, node)

    name = node.attributes["name"].to_s
    gaurd = "#{name.upcase}_#{file}_H"
    puts <<END
/* -*- c++ -*- */
#ifndef #{gaurd}
#define #{gaurd}

#include "augobj.h"

#if defined(__cplusplus)

#include "augobjpp.hpp"

# if !defined(AUG_NOTHROW)
#  define AUG_NOTHROW
# endif /* !AUG_NOTHROW */

/* For pointer conversions, see 4.10/2:

   "An rvalue of type 'pointer to cv T,' where T is an object type, can be
   converted to an rvalue of type 'pointer to cv void.' The result of
   converting a 'pointer to cv T' to a 'pointer to cv void' points to the
   start of the storage location where the object of type T resides, as if the
   object is a most derived object (1.8) of type T (that is, not a base class
   subobject)."

   So the void * will point to the beginning of your class B. And since B is
   not guaranteed to start with the POD, you may not get what you want. */

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */
END
    node.elements.each do |child|
        if child.name == "verbatim" then
            puts
            puts child.text
        elsif child.name == "interface" then
            iface = getinterface(name, child)
            putinterface(iface)
        else
            raise "unknown element '#{x.name}'"
        end
    end

    puts <<END

#endif /* #{gaurd} */
END
end

file = "INTERFACE"

opts = OptionParser.new do |opts|
    opts.on("-f FILE") do |x|
        file = File.basename(x, ".h").upcase
        file.gsub!(/[^A-Z]/, '_')
    end
end

opts.parse!(ARGV)

if ARGV.empty? then
    doc = Document.new($stdin)
    node = doc.root
    putpackage(file, node)
else
    ARGV.each do |x|
        xml = File.new(x)
        doc = Document.new(xml)
        node = doc.root
        putpackage(file, node)
    end
end
