#!/usr/bin/env ruby
require 'optparse'
require 'rexml/document'

include REXML

class Param
    attr_reader :name, :type
    def initialize(name, type)
        @name = name
        @type = type
    end
end

class Method_
    attr_reader :name, :type
    def initialize(name, type, qname = nil)
        @name = name
        @type = type
        @qname = qname
        @params = []
    end
    def each_param(&action)
        @params.each &action
    end
    def push_param(param)
        @params << param
    end
    def qname(iface)
        if @qname.nil? then
            @name + iface
        else
            @qname
        end
    end
end

$cast = Method_.new("cast", "void*")
$cast.push_param(Param.new("id", "const char*"))
$incref = Method_.new("incref", "int")
$decref = Method_.new("decref", "int")

def base?(method)
    method.equal?($cast) || method.equal?($incref) \
        || method.equal?($decref)
end

class Interface
    attr_reader :pkg, :name
    def initialize(pkg, name)
        @pkg = pkg
        @name = name
        @methods = [$cast, $incref, $decref]
    end
    def each_method(&action)
        @methods.each &action
    end
    def push_method(method)
        @methods << method
    end
    def cname
        "#{@pkg}_#{@name}"
    end
end

def getreturn(method)
    method.type == "void" ? "" : "return "
end

def getarglist(iface, method)
    ls = ["#{iface.cname}* obj"]
    method.each_param {|param| ls << "#{param.type} #{param.name}"}
    ls.join(", ")
end

def getnamelist(method)
    ls = ["obj"]
    method.each_param {|param| ls << param.name}
    ls.join(", ")
end

def getnamepplist(method)
    ls = []
    method.each_param {|param| ls << param.name}
    ls.join(", ")
end

def gettypelist(iface, method)
    ls = ["#{iface.cname}*"]
    method.each_param {|param| ls << param.type}
    ls.join(", ")
end

def getmethodlist(iface)
    ls = []
    iface.each_method {|method| ls << "#{' ' * 16}#{method.name}_"}
    ls.join(",\n")
end

def getparam(node)
    name = node.attributes["name"].to_s
    type = node.attributes["type"].to_s
    Param.new(name, type)
end

def getmethod(node)
    name = node.attributes["name"].to_s
    type = node.attributes["type"].to_s
    qname = nil
    if node.attributes.has_key? "qname" then
        qname = node.attributes["qname"].to_s
    end
    method = Method_.new(name, type, qname)
    node.elements.each do |child|
        if child.name == "param" then
            param = getparam(child)
            method.push_param(param)
        else
            raise "unknown element '#{x.name}'"
        end
    end
    method
end

def getinterface(pkg, node)
    name = node.attributes["name"].to_s
    interface = Interface.new(pkg, name)
    node.elements.each do |child|
        if child.name == "method" then
            method = getmethod(child)
            interface.push_method(method)
        else
            raise "unknown element '#{x.name}'"
        end
    end
    interface
end

def putcmethod(iface, method)
    typelist = gettypelist(iface, method)
    puts "    #{method.type} (*#{method.name}_)(#{typelist});"
end

def putcdefine(iface, method)
    return if base?(method)
    namelist = getnamelist(method)
    puts <<END

#define #{iface.pkg}_#{method.qname(iface.name)}(#{namelist}) \\
    ((#{iface.cname}*)obj)->vtbl_->#{method.name}_(#{namelist})
END
end

def putinline(iface, method)
    return if base?(method)

    arglist = getarglist(iface, method)
    namelist = getnamelist(method)
    puts <<END

    inline #{method.type}
    #{method.qname(iface.name)}(#{arglist}) AUG_NOTHROW
    {
        #{getreturn method}obj->vtbl_->#{method.name}_(#{namelist});
    }
END
end

def putstatic(iface, method)
    arglist = getarglist(iface, method)
    namelist = getnamepplist(method)
    if base?(method) then
        qname = method.name
    else
        qname = method.qname(iface.name)
    end
    puts <<END

        static #{method.type}
        #{method.name}_(#{arglist}) AUG_NOTHROW
        {
            T* impl = static_cast<T*>(obj->impl_);
            #{getreturn method}impl->#{qname}(#{namelist});
        }
END
end

def putinterface(iface)
    puts <<END

struct #{iface.cname}vtbl;
typedef struct {
    const struct #{iface.cname}vtbl* vtbl_;
    void* impl_;
} #{iface.cname};
static const char #{iface.cname}id[] = "#{iface.cname}";

struct #{iface.cname}vtbl {
END

    iface.each_method {|x| putcmethod iface, x}
    puts "};"
    iface.each_method {|x| putcdefine iface, x}

    puts <<END

#if defined(__cplusplus)
namespace aug {
    template <>
    struct object_traits<#{iface.cname}> {
        static const char*
        id()
        {
            return #{iface.cname}id;
        }
    };
}

namespace #{iface.pkg} {
END
    iface.each_method {|x| putinline iface, x}
    puts <<END

    template <typename T>
    class #{iface.name}_base {
END
    iface.each_method {|x| putstatic iface, x}
    puts <<END

    protected:
        ~#{iface.name}_base() AUG_NOTHROW
        {
        }
        static const #{iface.cname}vtbl*
        #{iface.name}vtbl()
        {
            static const #{iface.cname}vtbl local = {
#{getmethodlist(iface)}
            };
            return &local;
        }
    };
}
#endif /* __cplusplus */
END
end

def putpackage(file, node)

    name = node.attributes["name"].to_s
    gaurd = "#{name.upcase}_#{file}_H"
    puts <<END
/* -*- c++ -*- */
#ifndef #{gaurd}
#define #{gaurd}

#include "augobj.h"

#if defined(__cplusplus)

# if !defined(AUG_NOTHROW)
#  define AUG_NOTHROW throw()
# endif /* !AUG_NOTHROW */

namespace aug {
    template <typename T>
    struct object_traits;
}

#endif /* __cplusplus */
END
    node.elements.each do |child|
        if child.name == "verbatim" then
            puts
            puts child.text
        elsif child.name == "interface" then
            iface = getinterface(name, child)
            putinterface(iface)
        else
            raise "unknown element '#{x.name}'"
        end
    end

    puts <<END

#endif /* #{gaurd} */
END
end

file = "INTERFACE"

opts = OptionParser.new do |opts|
    opts.on("-f FILE") do |x|
        file = x.upcase
    end
end

opts.parse!(ARGV)
doc = Document.new($stdin)
node = doc.root
putpackage(file, node)
